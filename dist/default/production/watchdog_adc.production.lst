

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Fri Apr 14 17:59:43 2023

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	12F1822
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC12F1822 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001E                     	;# 
    80  001F                     	;# 
    81  008C                     	;# 
    82  0091                     	;# 
    83  0092                     	;# 
    84  0095                     	;# 
    85  0096                     	;# 
    86  0097                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009E                     	;# 
    95  010C                     	;# 
    96  0111                     	;# 
    97  0112                     	;# 
    98  0115                     	;# 
    99  0116                     	;# 
   100  0117                     	;# 
   101  0118                     	;# 
   102  0119                     	;# 
   103  011A                     	;# 
   104  011B                     	;# 
   105  011D                     	;# 
   106  011D                     	;# 
   107  018C                     	;# 
   108  0191                     	;# 
   109  0191                     	;# 
   110  0192                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0193                     	;# 
   114  0194                     	;# 
   115  0195                     	;# 
   116  0196                     	;# 
   117  0199                     	;# 
   118  019A                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019B                     	;# 
   123  019C                     	;# 
   124  019C                     	;# 
   125  019D                     	;# 
   126  019E                     	;# 
   127  019F                     	;# 
   128  020C                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0212                     	;# 
   133  0213                     	;# 
   134  0213                     	;# 
   135  0214                     	;# 
   136  0214                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0216                     	;# 
   141  0216                     	;# 
   142  0217                     	;# 
   143  0217                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0391                     	;# 
   153  0392                     	;# 
   154  0393                     	;# 
   155  039A                     	;# 
   156  039C                     	;# 
   157  039D                     	;# 
   158  039E                     	;# 
   159  039F                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  008C                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  0111                     	;# 
   213  0112                     	;# 
   214  0115                     	;# 
   215  0116                     	;# 
   216  0117                     	;# 
   217  0118                     	;# 
   218  0119                     	;# 
   219  011A                     	;# 
   220  011B                     	;# 
   221  011D                     	;# 
   222  011D                     	;# 
   223  018C                     	;# 
   224  0191                     	;# 
   225  0191                     	;# 
   226  0192                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0193                     	;# 
   230  0194                     	;# 
   231  0195                     	;# 
   232  0196                     	;# 
   233  0199                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019C                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020C                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0216                     	;# 
   257  0216                     	;# 
   258  0217                     	;# 
   259  0217                     	;# 
   260  0291                     	;# 
   261  0291                     	;# 
   262  0292                     	;# 
   263  0293                     	;# 
   264  0294                     	;# 
   265  0295                     	;# 
   266  0295                     	;# 
   267  0296                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  039A                     	;# 
   272  039C                     	;# 
   273  039D                     	;# 
   274  039E                     	;# 
   275  039F                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287                           
   288                           	psect	idataBANK0
   289  036A                     __pidataBANK0:
   290                           
   291                           ;initializer for _average
   292  036A  34FF               	retlw	255
   293  036B  34FF               	retlw	255
   294  036C  3400               	retlw	0
   295  036D  3400               	retlw	0
   296  001A                     _TMR2	set	26
   297  001B                     _PR2	set	27
   298  001C                     _T2CONbits	set	28
   299  0011                     _PIR1bits	set	17
   300  000B                     _INTCONbits	set	11
   301  009B                     _ADRESL	set	155
   302  009C                     _ADRESH	set	156
   303  0091                     _PIE1bits	set	145
   304  009E                     _ADCON1bits	set	158
   305  009D                     _ADCON0bits	set	157
   306  008C                     _TRISAbits	set	140
   307  010C                     _LATAbits	set	268
   308  0117                     _FVRCONbits	set	279
   309  019B                     _SPBRGL	set	411
   310  019C                     _SPBRGH	set	412
   311  019F                     _BAUDCONbits	set	415
   312  019D                     _RCSTAbits	set	413
   313  018C                     _ANSELAbits	set	396
   314  019E                     _TXSTAbits	set	414
   315  019A                     _TXREG	set	410
   316                           
   317                           	psect	cinit
   318  00B6                     start_initialization:	
   319                           ; #config settings
   320                           
   321  00B6                     __initialization:
   322                           
   323                           ; Initialize objects allocated to BANK0
   324  00B6  3183  236A  3180   	fcall	__pidataBANK0	;fetch initializer
   325  00B9  00E3               	movwf	__pdataBANK0& (0+127)
   326  00BA  3183  236B  3180   	fcall	__pidataBANK0+1	;fetch initializer
   327  00BD  00E4               	movwf	(__pdataBANK0+1)& (0+127)
   328  00BE  3183  236C  3180   	fcall	__pidataBANK0+2	;fetch initializer
   329  00C1  00E5               	movwf	(__pdataBANK0+2)& (0+127)
   330  00C2  3183  236D  3180   	fcall	__pidataBANK0+3	;fetch initializer
   331  00C5  00E6               	movwf	(__pdataBANK0+3)& (0+127)
   332                           
   333                           ; Clear objects allocated to BANK0
   334  00C6  3020               	movlw	low __pbssBANK0
   335  00C7  0084               	movwf	4
   336  00C8  3000               	movlw	high __pbssBANK0
   337  00C9  0085               	movwf	5
   338  00CA  3026               	movlw	38
   339  00CB  3183  2364  3180   	fcall	clear_ram0
   340  00CE                     end_of_initialization:	
   341                           ;End of C runtime variable initialization code
   342                           
   343  00CE                     __end_of__initialization:
   344  00CE  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   345  00CF  0020               	movlb	0
   346  00D0  28D1               	ljmp	_main	;jump to C main() function
   347                           
   348                           	psect	bssBANK0
   349  0020                     __pbssBANK0:
   350  0020                     _mainreset:
   351  0020                     	ds	4
   352  0024                     _voltimer:
   353  0024                     	ds	4
   354  0028                     _pintimer:
   355  0028                     	ds	4
   356  002C                     _timer:
   357  002C                     	ds	4
   358  0030                     _resettimer:
   359  0030                     	ds	2
   360  0032                     _actstate:
   361  0032                     	ds	2
   362  0034                     _laststate:
   363  0034                     	ds	2
   364  0036                     _buffpointer:
   365  0036                     	ds	1
   366  0037                     _sendcommands:
   367  0037                     	ds	1
   368  0038                     _pinreset:
   369  0038                     	ds	1
   370  0039                     _adcreset:
   371  0039                     	ds	1
   372  003A                     _buffer:
   373  003A                     	ds	12
   374                           
   375                           	psect	dataBANK0
   376  0063                     __pdataBANK0:
   377  0063                     _average:
   378  0063                     	ds	4
   379                           
   380                           	psect	clrtext
   381  0364                     clear_ram0:	
   382                           ;	Called with FSR0 containing the base address, and
   383                           ;	WREG with the size to clear
   384                           
   385  0364  0064               	clrwdt	;clear the watchdog before getting into this loop
   386  0365                     clrloop0:
   387  0365  0180               	clrf	0	;clear RAM location pointed to by FSR
   388  0366  3101               	addfsr 0,1
   389  0367  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   390  0368  2B65               	goto	clrloop0	;have we reached the end yet?
   391  0369  3400               	retlw	0	;all done for this memory range, return
   392                           
   393                           	psect	cstackCOMMON
   394  0070                     __pcstackCOMMON:
   395  0070                     ?_main:
   396  0070                     ?_my_isr_routine:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?___aldiv:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ___aldiv@divisor:	
   403                           ; 4 bytes @ 0x0
   404                           
   405                           
   406                           ; 4 bytes @ 0x0
   407  0070                     	ds	4
   408  0074                     ___aldiv@dividend:
   409                           
   410                           ; 4 bytes @ 0x4
   411  0074                     	ds	4
   412  0078                     ??___aldiv:
   413                           
   414                           ; 1 bytes @ 0x8
   415  0078                     	ds	1
   416  0079                     ??_my_isr_routine:
   417                           
   418                           ; 1 bytes @ 0x9
   419  0079                     	ds	3
   420  007C                     my_isr_routine@temp:
   421                           
   422                           ; 2 bytes @ 0xC
   423  007C                     	ds	2
   424                           
   425                           	psect	cstackBANK0
   426  0046                     __pcstackBANK0:
   427  0046                     ___aldiv@counter:
   428                           
   429                           ; 1 bytes @ 0x0
   430  0046                     	ds	1
   431  0047                     ___aldiv@sign:
   432                           
   433                           ; 1 bytes @ 0x1
   434  0047                     	ds	1
   435  0048                     ___aldiv@quotient:
   436                           
   437                           ; 4 bytes @ 0x2
   438  0048                     	ds	4
   439  004C                     ?_WriteSerial:
   440  004C                     WriteSerial@len:	
   441                           ; 1 bytes @ 0x6
   442                           
   443                           
   444                           ; 1 bytes @ 0x6
   445  004C                     	ds	1
   446  004D                     ??_WriteSerial:
   447                           
   448                           ; 1 bytes @ 0x7
   449  004D                     	ds	1
   450  004E                     WriteSerial@i:
   451                           
   452                           ; 1 bytes @ 0x8
   453  004E                     	ds	1
   454  004F                     WriteSerial@buffer:
   455                           
   456                           ; 1 bytes @ 0x9
   457  004F                     	ds	1
   458  0050                     ?_SendCommand:
   459  0050                     SendCommand@par1:	
   460                           ; 1 bytes @ 0xA
   461                           
   462                           
   463                           ; 1 bytes @ 0xA
   464  0050                     	ds	1
   465  0051                     SendCommand@par2:
   466                           
   467                           ; 1 bytes @ 0xB
   468  0051                     	ds	1
   469  0052                     ??_SendCommand:
   470                           
   471                           ; 1 bytes @ 0xC
   472  0052                     	ds	12
   473  005E                     SendCommand@command:
   474                           
   475                           ; 1 bytes @ 0x18
   476  005E                     	ds	1
   477  005F                     SendCommand@checksum:
   478                           
   479                           ; 2 bytes @ 0x19
   480  005F                     	ds	2
   481  0061                     ??_main:
   482                           
   483                           ; 1 bytes @ 0x1B
   484  0061                     	ds	2
   485                           
   486                           	psect	maintext
   487  00D1                     __pmaintext:	
   488 ;;
   489 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   490 ;;
   491 ;; *************** function _main *****************
   492 ;; Defined at:
   493 ;;		line 99 in file "watchdog.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   502 ;; Tracked objects:
   503 ;;		On entry : B1F/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1
   507 ;;      Params:         0       0       0
   508 ;;      Locals:         0       0       0
   509 ;;      Temps:          0       2       0
   510 ;;      Totals:         0       2       0
   511 ;;Total ram usage:        2 bytes
   512 ;; Hardware stack levels required when called:    4
   513 ;; This function calls:
   514 ;;		_SendCommand
   515 ;; This function is called by:
   516 ;;		Startup code after reset
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520                           
   521                           ;psect for function _main
   522  00D1                     _main:
   523  00D1                     l1013:	
   524                           ;incstack = 0
   525                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   526                           
   527                           
   528                           ;watchdog.c: 100:     TRISAbits.TRISA2 = 0;
   529  00D1  0021               	movlb	1	; select bank1
   530  00D2  110C               	bcf	12,2	;volatile
   531                           
   532                           ;watchdog.c: 101:     TRISAbits.TRISA0 = 0;
   533  00D3  100C               	bcf	12,0	;volatile
   534                           
   535                           ;watchdog.c: 102:     TRISAbits.TRISA5 = 0;
   536  00D4  128C               	bcf	12,5	;volatile
   537                           
   538                           ;watchdog.c: 103:     TRISAbits.TRISA1 = 1;
   539  00D5  148C               	bsf	12,1	;volatile
   540                           
   541                           ;watchdog.c: 104:     TRISAbits.TRISA4 = 1;
   542  00D6  160C               	bsf	12,4	;volatile
   543                           
   544                           ;watchdog.c: 105:     ANSELAbits.ANSA1 = 1;
   545  00D7  0023               	movlb	3	; select bank3
   546  00D8  148C               	bsf	12,1	;volatile
   547                           
   548                           ;watchdog.c: 106:     ANSELAbits.ANSA0 = 0;
   549  00D9  100C               	bcf	12,0	;volatile
   550                           
   551                           ;watchdog.c: 107:     ADCON0bits.ADON = 1;
   552  00DA  0021               	movlb	1	; select bank1
   553  00DB  141D               	bsf	29,0	;volatile
   554  00DC                     l1015:
   555                           
   556                           ;watchdog.c: 108:     ADCON1bits.ADPREF = 0b11;
   557  00DC  3003               	movlw	3
   558  00DD  049E               	iorwf	30,f	;volatile
   559                           
   560                           ;watchdog.c: 109:     FVRCONbits.ADFVR = 0b10;
   561  00DE  0022               	movlb	2	; select bank2
   562  00DF  0817               	movf	23,w	;volatile
   563  00E0  39FC               	andlw	-4
   564  00E1  3802               	iorlw	2
   565  00E2  0097               	movwf	23	;volatile
   566  00E3                     l1017:
   567                           
   568                           ;watchdog.c: 110:     FVRCONbits.FVREN = 1;
   569  00E3  1797               	bsf	23,7	;volatile
   570  00E4                     l1019:
   571                           
   572                           ;watchdog.c: 112:     TXSTAbits.BRGH = 1;
   573  00E4  0023               	movlb	3	; select bank3
   574  00E5  151E               	bsf	30,2	;volatile
   575  00E6                     l1021:
   576                           
   577                           ;watchdog.c: 113:     TXSTAbits.TXEN = 1;
   578  00E6  169E               	bsf	30,5	;volatile
   579  00E7                     l1023:
   580                           
   581                           ;watchdog.c: 114:     RCSTAbits.SPEN = 1;
   582  00E7  179D               	bsf	29,7	;volatile
   583  00E8                     l1025:
   584                           
   585                           ;watchdog.c: 115:     BAUDCONbits.BRG16 = 1;
   586  00E8  159F               	bsf	31,3	;volatile
   587  00E9                     l1027:
   588                           
   589                           ;watchdog.c: 116:     SPBRGH = 0;
   590  00E9  019C               	clrf	28	;volatile
   591  00EA                     l1029:
   592                           
   593                           ;watchdog.c: 117:     SPBRGL = 12;
   594  00EA  300C               	movlw	12
   595  00EB  009B               	movwf	27	;volatile
   596  00EC                     l1031:
   597                           
   598                           ;watchdog.c: 119:     INTCONbits.GIE = 1;
   599  00EC  178B               	bsf	11,7	;volatile
   600  00ED                     l1033:
   601                           
   602                           ;watchdog.c: 120:     INTCONbits.PEIE = 1;
   603  00ED  170B               	bsf	11,6	;volatile
   604  00EE                     l1035:
   605                           
   606                           ;watchdog.c: 121:     PIR1bits.TMR2IF = 0;
   607  00EE  0020               	movlb	0	; select bank0
   608  00EF  1091               	bcf	17,1	;volatile
   609  00F0                     l1037:
   610                           
   611                           ;watchdog.c: 122:     PIE1bits.TMR2IE = 1;
   612  00F0  0021               	movlb	1	; select bank1
   613  00F1  1491               	bsf	17,1	;volatile
   614  00F2                     l1039:
   615                           
   616                           ;watchdog.c: 124:     T2CONbits.T2CKPS = 0b11;
   617  00F2  3003               	movlw	3
   618  00F3  0020               	movlb	0	; select bank0
   619  00F4  049C               	iorwf	28,f	;volatile
   620  00F5                     l1041:
   621                           
   622                           ;watchdog.c: 125:     T2CONbits.T2OUTPS = 0b1111;
   623  00F5  3078               	movlw	120
   624  00F6  049C               	iorwf	28,f	;volatile
   625  00F7                     l1043:
   626                           
   627                           ;watchdog.c: 126:     T2CONbits.TMR2ON = 1;
   628  00F7  151C               	bsf	28,2	;volatile
   629  00F8                     l1045:
   630                           
   631                           ;watchdog.c: 127:     PR2 = 0xff;
   632  00F8  30FF               	movlw	255
   633  00F9  009B               	movwf	27	;volatile
   634  00FA                     l1047:
   635                           
   636                           ;watchdog.c: 128:     _delay((unsigned long)((2000)*(500000/4000.0)));
   637  00FA  3002               	movlw	2
   638  00FB  0020               	movlb	0	; select bank0
   639  00FC  00E2               	movwf	??_main+1
   640  00FD  3045               	movlw	69
   641  00FE  00E1               	movwf	??_main
   642  00FF  30A9               	movlw	169
   643  0100                     u637:
   644  0100  0B89               	decfsz	9,f
   645  0101  2900               	goto	u637
   646  0102  0BE1               	decfsz	??_main,f
   647  0103  2900               	goto	u637
   648  0104  0BE2               	decfsz	??_main+1,f
   649  0105  2900               	goto	u637
   650  0106  3200               	nop2
   651  0107                     l1049:
   652                           
   653                           ;watchdog.c: 129:     SendCommand(0x06,0,17);
   654  0107  0020               	movlb	0	; select bank0
   655  0108  01D0               	clrf	SendCommand@par1
   656  0109  3011               	movlw	17
   657  010A  00E1               	movwf	??_main
   658  010B  0861               	movf	??_main,w
   659  010C  00D1               	movwf	SendCommand@par2
   660  010D  3006               	movlw	6
   661  010E  3182  22DD  3180   	fcall	_SendCommand
   662  0111                     l1051:
   663                           
   664                           ;watchdog.c: 130:     _delay((unsigned long)((2000)*(500000/4000.0)));
   665  0111  3002               	movlw	2
   666  0112  0020               	movlb	0	; select bank0
   667  0113  00E2               	movwf	??_main+1
   668  0114  3045               	movlw	69
   669  0115  00E1               	movwf	??_main
   670  0116  30A9               	movlw	169
   671  0117                     u647:
   672  0117  0B89               	decfsz	9,f
   673  0118  2917               	goto	u647
   674  0119  0BE1               	decfsz	??_main,f
   675  011A  2917               	goto	u647
   676  011B  0BE2               	decfsz	??_main+1,f
   677  011C  2917               	goto	u647
   678  011D  3200               	nop2
   679  011E                     l1053:
   680                           
   681                           ;watchdog.c: 131:     SendCommand(0x11,0,1);
   682  011E  0020               	movlb	0	; select bank0
   683  011F  01D0               	clrf	SendCommand@par1
   684  0120  01D1               	clrf	SendCommand@par2
   685  0121  0AD1               	incf	SendCommand@par2,f
   686  0122  3011               	movlw	17
   687  0123  3182  22DD  3180   	fcall	_SendCommand
   688  0126                     l1055:
   689                           
   690                           ;watchdog.c: 132:     _delay((unsigned long)((2000)*(500000/4000.0)));
   691  0126  3002               	movlw	2
   692  0127  0020               	movlb	0	; select bank0
   693  0128  00E2               	movwf	??_main+1
   694  0129  3045               	movlw	69
   695  012A  00E1               	movwf	??_main
   696  012B  30A9               	movlw	169
   697  012C                     u657:
   698  012C  0B89               	decfsz	9,f
   699  012D  292C               	goto	u657
   700  012E  0BE1               	decfsz	??_main,f
   701  012F  292C               	goto	u657
   702  0130  0BE2               	decfsz	??_main+1,f
   703  0131  292C               	goto	u657
   704  0132  3200               	nop2
   705  0133                     l1057:
   706                           
   707                           ;watchdog.c: 133:     SendCommand(0x06,0,17);
   708  0133  0020               	movlb	0	; select bank0
   709  0134  01D0               	clrf	SendCommand@par1
   710  0135  3011               	movlw	17
   711  0136  00E1               	movwf	??_main
   712  0137  0861               	movf	??_main,w
   713  0138  00D1               	movwf	SendCommand@par2
   714  0139  3006               	movlw	6
   715  013A  3182  22DD  3180   	fcall	_SendCommand
   716  013D                     l1059:
   717                           
   718                           ;watchdog.c: 134:     pintimer = 0;
   719  013D  3000               	movlw	0
   720  013E  0020               	movlb	0	; select bank0
   721  013F  00AB               	movwf	_pintimer+3
   722  0140  3000               	movlw	0
   723  0141  00AA               	movwf	_pintimer+2
   724  0142  3000               	movlw	0
   725  0143  00A9               	movwf	_pintimer+1
   726  0144  3000               	movlw	0
   727  0145  00A8               	movwf	_pintimer
   728  0146                     l1061:
   729                           
   730                           ;watchdog.c: 137:     {;watchdog.c: 138:         timer++;
   731  0146  3001               	movlw	1
   732  0147  0020               	movlb	0	; select bank0
   733  0148  07AC               	addwf	_timer,f
   734  0149  3000               	movlw	0
   735  014A  3DAD               	addwfc	_timer+1,f
   736  014B  3000               	movlw	0
   737  014C  3DAE               	addwfc	_timer+2,f
   738  014D  3000               	movlw	0
   739  014E  3DAF               	addwfc	_timer+3,f
   740  014F                     l1063:
   741                           
   742                           ;watchdog.c: 139:         voltimer++;
   743  014F  3001               	movlw	1
   744  0150  07A4               	addwf	_voltimer,f
   745  0151  3000               	movlw	0
   746  0152  3DA5               	addwfc	_voltimer+1,f
   747  0153  3000               	movlw	0
   748  0154  3DA6               	addwfc	_voltimer+2,f
   749  0155  3000               	movlw	0
   750  0156  3DA7               	addwfc	_voltimer+3,f
   751  0157                     l1065:
   752                           
   753                           ;watchdog.c: 140:         if(voltimer > 60000)
   754  0157  1BA7               	btfsc	_voltimer+3,7
   755  0158  2966               	goto	u441
   756  0159  0827               	movf	_voltimer+3,w
   757  015A  1D03               	btfss	3,2
   758  015B  2967               	goto	u440
   759  015C  0826               	movf	_voltimer+2,w
   760  015D  1D03               	btfss	3,2
   761  015E  2967               	goto	u440
   762  015F  3061               	movlw	97
   763  0160  0224               	subwf	_voltimer,w
   764  0161  30EA               	movlw	234
   765  0162  3B25               	subwfb	_voltimer+1,w
   766  0163  1C03               	btfss	3,0
   767  0164  2966               	goto	u441
   768  0165  2967               	goto	u440
   769  0166                     u441:
   770  0166  2987               	goto	l1073
   771  0167                     u440:
   772  0167                     l1067:
   773                           
   774                           ;watchdog.c: 141:         {;watchdog.c: 142:             _delay((unsigned long)((2000)*(
      +                          500000/4000.0)));
   775  0167  3002               	movlw	2
   776  0168  0020               	movlb	0	; select bank0
   777  0169  00E2               	movwf	??_main+1
   778  016A  3045               	movlw	69
   779  016B  00E1               	movwf	??_main
   780  016C  30A9               	movlw	169
   781  016D                     u667:
   782  016D  0B89               	decfsz	9,f
   783  016E  296D               	goto	u667
   784  016F  0BE1               	decfsz	??_main,f
   785  0170  296D               	goto	u667
   786  0171  0BE2               	decfsz	??_main+1,f
   787  0172  296D               	goto	u667
   788  0173  3200               	nop2
   789  0174                     l1069:
   790                           
   791                           ;watchdog.c: 143:             SendCommand(0x06,0,17);
   792  0174  0020               	movlb	0	; select bank0
   793  0175  01D0               	clrf	SendCommand@par1
   794  0176  3011               	movlw	17
   795  0177  00E1               	movwf	??_main
   796  0178  0861               	movf	??_main,w
   797  0179  00D1               	movwf	SendCommand@par2
   798  017A  3006               	movlw	6
   799  017B  3182  22DD  3180   	fcall	_SendCommand
   800  017E                     l1071:
   801                           
   802                           ;watchdog.c: 144:             voltimer = 0;
   803  017E  3000               	movlw	0
   804  017F  0020               	movlb	0	; select bank0
   805  0180  00A7               	movwf	_voltimer+3
   806  0181  3000               	movlw	0
   807  0182  00A6               	movwf	_voltimer+2
   808  0183  3000               	movlw	0
   809  0184  00A5               	movwf	_voltimer+1
   810  0185  3000               	movlw	0
   811  0186  00A4               	movwf	_voltimer
   812  0187                     l1073:
   813                           
   814                           ;watchdog.c: 147:         if(timer >100)
   815  0187  0020               	movlb	0	; select bank0
   816  0188  1BAF               	btfsc	_timer+3,7
   817  0189  2998               	goto	u451
   818  018A  082F               	movf	_timer+3,w
   819  018B  1D03               	btfss	3,2
   820  018C  2999               	goto	u450
   821  018D  082E               	movf	_timer+2,w
   822  018E  1D03               	btfss	3,2
   823  018F  2999               	goto	u450
   824  0190  082D               	movf	_timer+1,w
   825  0191  1D03               	btfss	3,2
   826  0192  2999               	goto	u450
   827  0193  3065               	movlw	101
   828  0194  022C               	subwf	_timer,w
   829  0195  1C03               	btfss	3,0
   830  0196  2998               	goto	u451
   831  0197  2999               	goto	u450
   832  0198                     u451:
   833  0198  2A47               	goto	l1123
   834  0199                     u450:
   835  0199                     l1075:
   836                           
   837                           ;watchdog.c: 148:         {;watchdog.c: 149:         ADCON0bits.CHS = 3;
   838  0199  0021               	movlb	1	; select bank1
   839  019A  081D               	movf	29,w	;volatile
   840  019B  3983               	andlw	-125
   841  019C  380C               	iorlw	12
   842  019D  009D               	movwf	29	;volatile
   843  019E                     l1077:
   844                           
   845                           ;watchdog.c: 150:         ADCON0bits.ADGO = 1;
   846  019E  149D               	bsf	29,1	;volatile
   847  019F                     l88:	
   848                           ;watchdog.c: 151:         while (ADCON0bits.nDONE != 0);
   849                           
   850  019F  189D               	btfsc	29,1	;volatile
   851  01A0  29A2               	goto	u461
   852  01A1  29A3               	goto	u460
   853  01A2                     u461:
   854  01A2  299F               	goto	l88
   855  01A3                     u460:
   856  01A3                     l1079:
   857                           
   858                           ;watchdog.c: 152:             if(ADRESH < 125)
   859  01A3  307D               	movlw	125
   860  01A4  021C               	subwf	28,w	;volatile
   861  01A5  1803               	skipnc
   862  01A6  29A8               	goto	u471
   863  01A7  29A9               	goto	u470
   864  01A8                     u471:
   865  01A8  29AC               	goto	l1083
   866  01A9                     u470:
   867  01A9                     l1081:
   868                           
   869                           ;watchdog.c: 153:             {;watchdog.c: 154:                 adcreset = 1;
   870  01A9  0020               	movlb	0	; select bank0
   871  01AA  01B9               	clrf	_adcreset
   872  01AB  0AB9               	incf	_adcreset,f
   873  01AC                     l1083:
   874                           
   875                           ;watchdog.c: 157:             if(ADRESH > 146)
   876  01AC  3093               	movlw	147
   877  01AD  0021               	movlb	1	; select bank1
   878  01AE  021C               	subwf	28,w	;volatile
   879  01AF  1C03               	skipc
   880  01B0  29B2               	goto	u481
   881  01B1  29B3               	goto	u480
   882  01B2                     u481:
   883  01B2  29B5               	goto	l1087
   884  01B3                     u480:
   885  01B3                     l1085:
   886                           
   887                           ;watchdog.c: 158:             {;watchdog.c: 159:                 adcreset = 0;
   888  01B3  0020               	movlb	0	; select bank0
   889  01B4  01B9               	clrf	_adcreset
   890  01B5                     l1087:
   891                           
   892                           ;watchdog.c: 161:             if(ADRESH < 160)
   893  01B5  30A0               	movlw	160
   894  01B6  0021               	movlb	1	; select bank1
   895  01B7  021C               	subwf	28,w	;volatile
   896  01B8  1803               	skipnc
   897  01B9  29BB               	goto	u491
   898  01BA  29BC               	goto	u490
   899  01BB                     u491:
   900  01BB  29BE               	goto	l1091
   901  01BC                     u490:
   902  01BC                     l1089:
   903                           
   904                           ;watchdog.c: 162:             {;watchdog.c: 163:                 LATAbits.LATA5 = 1;
   905  01BC  0022               	movlb	2	; select bank2
   906  01BD  168C               	bsf	12,5	;volatile
   907  01BE                     l1091:
   908                           
   909                           ;watchdog.c: 165:             if(ADRESH > 158)
   910  01BE  309F               	movlw	159
   911  01BF  0021               	movlb	1	; select bank1
   912  01C0  021C               	subwf	28,w	;volatile
   913  01C1  1C03               	skipc
   914  01C2  29C4               	goto	u501
   915  01C3  29C5               	goto	u500
   916  01C4                     u501:
   917  01C4  29C7               	goto	l1095
   918  01C5                     u500:
   919  01C5                     l1093:
   920                           
   921                           ;watchdog.c: 166:             {;watchdog.c: 167:                 LATAbits.LATA5 = 0;
   922  01C5  0022               	movlb	2	; select bank2
   923  01C6  128C               	bcf	12,5	;volatile
   924  01C7                     l1095:
   925                           
   926                           ;watchdog.c: 180:             if(resettimer > 0 )
   927  01C7  0020               	movlb	0	; select bank0
   928  01C8  0830               	movf	_resettimer,w
   929  01C9  0431               	iorwf	_resettimer+1,w
   930  01CA  1903               	btfsc	3,2
   931  01CB  29CD               	goto	u511
   932  01CC  29CE               	goto	u510
   933  01CD                     u511:
   934  01CD  29D2               	goto	l1099
   935  01CE                     u510:
   936  01CE                     l1097:
   937                           
   938                           ;watchdog.c: 181:             {;watchdog.c: 182:                 resettimer--;
   939  01CE  3001               	movlw	1
   940  01CF  02B0               	subwf	_resettimer,f
   941  01D0  3000               	movlw	0
   942  01D1  3BB1               	subwfb	_resettimer+1,f
   943  01D2                     l1099:
   944                           
   945                           ;watchdog.c: 184:             if(resettimer == 0)
   946  01D2  0830               	movf	_resettimer,w
   947  01D3  0431               	iorwf	_resettimer+1,w
   948  01D4  1D03               	btfss	3,2
   949  01D5  29D7               	goto	u521
   950  01D6  29D8               	goto	u520
   951  01D7                     u521:
   952  01D7  29D9               	goto	l1103
   953  01D8                     u520:
   954  01D8                     l1101:
   955                           
   956                           ;watchdog.c: 185:             {;watchdog.c: 186:                 pinreset = 0;
   957  01D8  01B8               	clrf	_pinreset
   958  01D9                     l1103:
   959                           
   960                           ;watchdog.c: 188:             if( pinreset || adcreset)
   961  01D9  0838               	movf	_pinreset,w
   962  01DA  1D03               	btfss	3,2
   963  01DB  29DD               	goto	u531
   964  01DC  29DE               	goto	u530
   965  01DD                     u531:
   966  01DD  29E3               	goto	l99
   967  01DE                     u530:
   968  01DE                     l1105:
   969  01DE  0839               	movf	_adcreset,w
   970  01DF  1903               	btfsc	3,2
   971  01E0  29E2               	goto	u541
   972  01E1  29E3               	goto	u540
   973  01E2                     u541:
   974  01E2  29ED               	goto	l97
   975  01E3                     u540:
   976  01E3                     l99:
   977                           
   978                           ;watchdog.c: 189:             {;watchdog.c: 190:                 LATAbits.LATA2 = 1;
   979  01E3  0022               	movlb	2	; select bank2
   980  01E4  150C               	bsf	12,2	;volatile
   981                           
   982                           ;watchdog.c: 191:                 sendcommands = 1;
   983  01E5  0020               	movlb	0	; select bank0
   984  01E6  01B7               	clrf	_sendcommands
   985  01E7  0AB7               	incf	_sendcommands,f
   986                           
   987                           ;watchdog.c: 192:                 TRISAbits.TRISA0 = 1;
   988  01E8  0021               	movlb	1	; select bank1
   989  01E9  140C               	bsf	12,0	;volatile
   990                           
   991                           ;watchdog.c: 193:                 RCSTAbits.SPEN = 0;
   992  01EA  0023               	movlb	3	; select bank3
   993  01EB  139D               	bcf	29,7	;volatile
   994                           
   995                           ;watchdog.c: 194:             }
   996  01EC  2A3E               	goto	l1121
   997  01ED                     l97:	
   998                           ;watchdog.c: 195:             else
   999                           
  1000                           
  1001                           ;watchdog.c: 196:             {;watchdog.c: 197:                 LATAbits.LATA2 = 0;
  1002  01ED  0022               	movlb	2	; select bank2
  1003  01EE  110C               	bcf	12,2	;volatile
  1004                           
  1005                           ;watchdog.c: 198:                 TRISAbits.TRISA0 = 0;
  1006  01EF  0021               	movlb	1	; select bank1
  1007  01F0  100C               	bcf	12,0	;volatile
  1008                           
  1009                           ;watchdog.c: 199:                 RCSTAbits.SPEN = 1;
  1010  01F1  0023               	movlb	3	; select bank3
  1011  01F2  179D               	bsf	29,7	;volatile
  1012  01F3                     l1107:
  1013                           
  1014                           ;watchdog.c: 200:                 if(sendcommands)
  1015  01F3  0020               	movlb	0	; select bank0
  1016  01F4  0837               	movf	_sendcommands,w
  1017  01F5  1903               	btfsc	3,2
  1018  01F6  29F8               	goto	u551
  1019  01F7  29F9               	goto	u550
  1020  01F8                     u551:
  1021  01F8  2A3E               	goto	l1121
  1022  01F9                     u550:
  1023  01F9                     l1109:
  1024                           
  1025                           ;watchdog.c: 201:                 {;watchdog.c: 202:                     _delay((unsigne
      +                          d long)((2000)*(500000/4000.0)));
  1026  01F9  3002               	movlw	2
  1027  01FA  0020               	movlb	0	; select bank0
  1028  01FB  00E2               	movwf	??_main+1
  1029  01FC  3045               	movlw	69
  1030  01FD  00E1               	movwf	??_main
  1031  01FE  30A9               	movlw	169
  1032  01FF                     u677:
  1033  01FF  0B89               	decfsz	9,f
  1034  0200  29FF               	goto	u677
  1035  0201  0BE1               	decfsz	??_main,f
  1036  0202  29FF               	goto	u677
  1037  0203  0BE2               	decfsz	??_main+1,f
  1038  0204  29FF               	goto	u677
  1039  0205  3200               	nop2
  1040  0206                     l1111:
  1041                           
  1042                           ;watchdog.c: 203:                     SendCommand(0x06,0,17);
  1043  0206  0020               	movlb	0	; select bank0
  1044  0207  01D0               	clrf	SendCommand@par1
  1045  0208  3011               	movlw	17
  1046  0209  00E1               	movwf	??_main
  1047  020A  0861               	movf	??_main,w
  1048  020B  00D1               	movwf	SendCommand@par2
  1049  020C  3006               	movlw	6
  1050  020D  3182  22DD  3180   	fcall	_SendCommand
  1051  0210                     l1113:
  1052                           
  1053                           ;watchdog.c: 204:                     _delay((unsigned long)((2000)*(500000/4000.0)));
  1054  0210  3002               	movlw	2
  1055  0211  0020               	movlb	0	; select bank0
  1056  0212  00E2               	movwf	??_main+1
  1057  0213  3045               	movlw	69
  1058  0214  00E1               	movwf	??_main
  1059  0215  30A9               	movlw	169
  1060  0216                     u687:
  1061  0216  0B89               	decfsz	9,f
  1062  0217  2A16               	goto	u687
  1063  0218  0BE1               	decfsz	??_main,f
  1064  0219  2A16               	goto	u687
  1065  021A  0BE2               	decfsz	??_main+1,f
  1066  021B  2A16               	goto	u687
  1067  021C  3200               	nop2
  1068                           
  1069                           ;watchdog.c: 205:                     SendCommand(0x11,0,1);
  1070  021D  0020               	movlb	0	; select bank0
  1071  021E  01D0               	clrf	SendCommand@par1
  1072  021F  01D1               	clrf	SendCommand@par2
  1073  0220  0AD1               	incf	SendCommand@par2,f
  1074  0221  3011               	movlw	17
  1075  0222  3182  22DD  3180   	fcall	_SendCommand
  1076  0225                     l1115:
  1077                           
  1078                           ;watchdog.c: 206:                     _delay((unsigned long)((2000)*(500000/4000.0)));
  1079  0225  3002               	movlw	2
  1080  0226  0020               	movlb	0	; select bank0
  1081  0227  00E2               	movwf	??_main+1
  1082  0228  3045               	movlw	69
  1083  0229  00E1               	movwf	??_main
  1084  022A  30A9               	movlw	169
  1085  022B                     u697:
  1086  022B  0B89               	decfsz	9,f
  1087  022C  2A2B               	goto	u697
  1088  022D  0BE1               	decfsz	??_main,f
  1089  022E  2A2B               	goto	u697
  1090  022F  0BE2               	decfsz	??_main+1,f
  1091  0230  2A2B               	goto	u697
  1092  0231  3200               	nop2
  1093  0232                     l1117:
  1094                           
  1095                           ;watchdog.c: 207:                     SendCommand(0x06,0,17);
  1096  0232  0020               	movlb	0	; select bank0
  1097  0233  01D0               	clrf	SendCommand@par1
  1098  0234  3011               	movlw	17
  1099  0235  00E1               	movwf	??_main
  1100  0236  0861               	movf	??_main,w
  1101  0237  00D1               	movwf	SendCommand@par2
  1102  0238  3006               	movlw	6
  1103  0239  3182  22DD  3180   	fcall	_SendCommand
  1104  023C                     l1119:
  1105                           
  1106                           ;watchdog.c: 208:                     sendcommands = 0;
  1107  023C  0020               	movlb	0	; select bank0
  1108  023D  01B7               	clrf	_sendcommands
  1109  023E                     l1121:
  1110                           
  1111                           ;watchdog.c: 211:             timer= 0;
  1112  023E  3000               	movlw	0
  1113  023F  0020               	movlb	0	; select bank0
  1114  0240  00AF               	movwf	_timer+3
  1115  0241  3000               	movlw	0
  1116  0242  00AE               	movwf	_timer+2
  1117  0243  3000               	movlw	0
  1118  0244  00AD               	movwf	_timer+1
  1119  0245  3000               	movlw	0
  1120  0246  00AC               	movwf	_timer
  1121  0247                     l1123:
  1122                           
  1123                           ;watchdog.c: 213:         _delay((unsigned long)((1)*(500000/4000.0)));
  1124  0247  3029               	movlw	41
  1125  0248                     u707:
  1126  0248  0B89               	decfsz	9,f
  1127  0249  2A48               	goto	u707
  1128  024A  3200               	nop2
  1129  024B  2946               	goto	l1061
  1130  024C  28B5               	ljmp	start
  1131  024D                     __end_of_main:
  1132                           
  1133                           	psect	text1
  1134  02DD                     __ptext1:	
  1135 ;; *************** function _SendCommand *****************
  1136 ;; Defined at:
  1137 ;;		line 80 in file "watchdog.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  command         1    wreg     unsigned char 
  1140 ;;  par1            1   10[BANK0 ] unsigned char 
  1141 ;;  par2            1   11[BANK0 ] unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  command         1   24[BANK0 ] unsigned char 
  1144 ;;  checksum        2   25[BANK0 ] short 
  1145 ;; Return value:  Size  Location     Type
  1146 ;;                  1    wreg      void 
  1147 ;; Registers used:
  1148 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1149 ;; Tracked objects:
  1150 ;;		On entry : 0/0
  1151 ;;		On exit  : 0/0
  1152 ;;		Unchanged: 0/0
  1153 ;; Data sizes:     COMMON   BANK0   BANK1
  1154 ;;      Params:         0       2       0
  1155 ;;      Locals:         0       3       0
  1156 ;;      Temps:          0      12       0
  1157 ;;      Totals:         0      17       0
  1158 ;;Total ram usage:       17 bytes
  1159 ;; Hardware stack levels used:    1
  1160 ;; Hardware stack levels required when called:    3
  1161 ;; This function calls:
  1162 ;;		_WriteSerial
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function _SendCommand
  1170  02DD                     _SendCommand:
  1171                           
  1172                           ;incstack = 0
  1173                           ; Regs used in _SendCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1174                           ;SendCommand@command stored from wreg
  1175  02DD  0020               	movlb	0	; select bank0
  1176  02DE  00DE               	movwf	SendCommand@command
  1177  02DF                     l955:
  1178                           
  1179                           ;watchdog.c: 80: void SendCommand(uint8_t command,uint8_t par1,uint8_t par2);watchdog.c:
      +                           81: {;watchdog.c: 82:     int16_t checksum;;watchdog.c: 83:     buffer[0] = 0x7E;
  1180  02DF  307E               	movlw	126
  1181  02E0  00D2               	movwf	??_SendCommand
  1182  02E1  0852               	movf	??_SendCommand,w
  1183  02E2  00BA               	movwf	_buffer
  1184                           
  1185                           ;watchdog.c: 84:     buffer[1] = 0xff;
  1186  02E3  30FF               	movlw	255
  1187  02E4  00D2               	movwf	??_SendCommand
  1188  02E5  0852               	movf	??_SendCommand,w
  1189  02E6  00BB               	movwf	_buffer+1
  1190                           
  1191                           ;watchdog.c: 85:     buffer[2] = 0x06;
  1192  02E7  3006               	movlw	6
  1193  02E8  00D2               	movwf	??_SendCommand
  1194  02E9  0852               	movf	??_SendCommand,w
  1195  02EA  00BC               	movwf	_buffer+2
  1196                           
  1197                           ;watchdog.c: 86:     buffer[3] = command;
  1198  02EB  085E               	movf	SendCommand@command,w
  1199  02EC  00D2               	movwf	??_SendCommand
  1200  02ED  0852               	movf	??_SendCommand,w
  1201  02EE  00BD               	movwf	_buffer+3
  1202  02EF                     l957:
  1203                           
  1204                           ;watchdog.c: 87:     buffer[4] = 0;
  1205  02EF  01BE               	clrf	_buffer+4
  1206  02F0                     l959:
  1207                           
  1208                           ;watchdog.c: 88:     buffer[5] = par1;
  1209  02F0  0850               	movf	SendCommand@par1,w
  1210  02F1  00D2               	movwf	??_SendCommand
  1211  02F2  0852               	movf	??_SendCommand,w
  1212  02F3  00BF               	movwf	_buffer+5
  1213  02F4                     l961:
  1214                           
  1215                           ;watchdog.c: 89:     buffer[6] = par2;
  1216  02F4  0851               	movf	SendCommand@par2,w
  1217  02F5  00D2               	movwf	??_SendCommand
  1218  02F6  0852               	movf	??_SendCommand,w
  1219  02F7  00C0               	movwf	_buffer+6
  1220  02F8                     l963:
  1221                           
  1222                           ;watchdog.c: 90:     checksum = 1-(buffer[1]+buffer[2]+buffer[3]+buffer[4]+buffer[5]+buf
      +                          fer[6]);
  1223  02F8  083B               	movf	_buffer+1,w
  1224  02F9  00D2               	movwf	??_SendCommand
  1225  02FA  01D3               	clrf	??_SendCommand+1
  1226  02FB  09D2               	comf	??_SendCommand,f
  1227  02FC  09D3               	comf	??_SendCommand+1,f
  1228  02FD  0AD2               	incf	??_SendCommand,f
  1229  02FE  1903               	skipnz
  1230  02FF  0AD3               	incf	??_SendCommand+1,f
  1231  0300  0853               	movf	??_SendCommand+1,w
  1232  0301  00D5               	movwf	??_SendCommand+3
  1233  0302  083C               	movf	_buffer+2,w
  1234  0303  0252               	subwf	??_SendCommand,w
  1235  0304  00D4               	movwf	??_SendCommand+2
  1236  0305  1C03               	skipc
  1237  0306  03D5               	decf	??_SendCommand+3,f
  1238  0307  0855               	movf	??_SendCommand+3,w
  1239  0308  00D7               	movwf	??_SendCommand+5
  1240  0309  083D               	movf	_buffer+3,w
  1241  030A  0254               	subwf	??_SendCommand+2,w
  1242  030B  00D6               	movwf	??_SendCommand+4
  1243  030C  1C03               	skipc
  1244  030D  03D7               	decf	??_SendCommand+5,f
  1245  030E  0857               	movf	??_SendCommand+5,w
  1246  030F  00D9               	movwf	??_SendCommand+7
  1247  0310  083E               	movf	_buffer+4,w
  1248  0311  0256               	subwf	??_SendCommand+4,w
  1249  0312  00D8               	movwf	??_SendCommand+6
  1250  0313  1C03               	skipc
  1251  0314  03D9               	decf	??_SendCommand+7,f
  1252  0315  0859               	movf	??_SendCommand+7,w
  1253  0316  00DB               	movwf	??_SendCommand+9
  1254  0317  083F               	movf	_buffer+5,w
  1255  0318  0258               	subwf	??_SendCommand+6,w
  1256  0319  00DA               	movwf	??_SendCommand+8
  1257  031A  1C03               	skipc
  1258  031B  03DB               	decf	??_SendCommand+9,f
  1259  031C  085B               	movf	??_SendCommand+9,w
  1260  031D  00DD               	movwf	??_SendCommand+11
  1261  031E  0840               	movf	_buffer+6,w
  1262  031F  025A               	subwf	??_SendCommand+8,w
  1263  0320  00DC               	movwf	??_SendCommand+10
  1264  0321  1C03               	skipc
  1265  0322  03DD               	decf	??_SendCommand+11,f
  1266  0323  085C               	movf	??_SendCommand+10,w
  1267  0324  3E01               	addlw	1
  1268  0325  00DF               	movwf	SendCommand@checksum
  1269  0326  3000               	movlw	0
  1270  0327  3D5D               	addwfc	??_SendCommand+11,w
  1271  0328  00E0               	movwf	SendCommand@checksum+1
  1272  0329                     l965:
  1273                           
  1274                           ;watchdog.c: 91:     checksum = checksum-1;
  1275  0329  085F               	movf	SendCommand@checksum,w
  1276  032A  3EFF               	addlw	255
  1277  032B  00DF               	movwf	SendCommand@checksum
  1278  032C  30FF               	movlw	255
  1279  032D  3D60               	addwfc	SendCommand@checksum+1,w
  1280  032E  00E0               	movwf	SendCommand@checksum+1
  1281                           
  1282                           ;watchdog.c: 92:     buffer[7] = checksum>>8;
  1283  032F  0860               	movf	SendCommand@checksum+1,w
  1284  0330  00D2               	movwf	??_SendCommand
  1285  0331  0852               	movf	??_SendCommand,w
  1286  0332  00C1               	movwf	_buffer+7
  1287  0333                     l967:
  1288                           
  1289                           ;watchdog.c: 93:     buffer[8] = checksum&0xff;
  1290  0333  085F               	movf	SendCommand@checksum,w
  1291  0334  00D2               	movwf	??_SendCommand
  1292  0335  0852               	movf	??_SendCommand,w
  1293  0336  00C2               	movwf	_buffer+8
  1294  0337                     l969:
  1295                           
  1296                           ;watchdog.c: 94:     buffer[9] = 0xEF;
  1297  0337  30EF               	movlw	239
  1298  0338  00D2               	movwf	??_SendCommand
  1299  0339  0852               	movf	??_SendCommand,w
  1300  033A  00C3               	movwf	_buffer+9
  1301  033B                     l971:
  1302                           
  1303                           ;watchdog.c: 95:     WriteSerial(&buffer,10);
  1304  033B  300A               	movlw	10
  1305  033C  00D2               	movwf	??_SendCommand
  1306  033D  0852               	movf	??_SendCommand,w
  1307  033E  00CC               	movwf	WriteSerial@len
  1308  033F  303A               	movlw	(low (_buffer| 0))& (0+255)
  1309  0340  3183  2344  3182   	fcall	_WriteSerial
  1310  0343                     l80:
  1311  0343  0008               	return
  1312  0344                     __end_of_SendCommand:
  1313                           
  1314                           	psect	text2
  1315  0344                     __ptext2:	
  1316 ;; *************** function _WriteSerial *****************
  1317 ;; Defined at:
  1318 ;;		line 71 in file "watchdog.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  buffer          1    wreg     PTR unsigned char 
  1321 ;;		 -> buffer(12), 
  1322 ;;  len             1    6[BANK0 ] unsigned char 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  buffer          1    9[BANK0 ] PTR unsigned char 
  1325 ;;		 -> buffer(12), 
  1326 ;;  i               1    8[BANK0 ] unsigned char 
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMMON   BANK0   BANK1
  1336 ;;      Params:         0       1       0
  1337 ;;      Locals:         0       2       0
  1338 ;;      Temps:          0       1       0
  1339 ;;      Totals:         0       4       0
  1340 ;;Total ram usage:        4 bytes
  1341 ;; Hardware stack levels used:    1
  1342 ;; Hardware stack levels required when called:    2
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_SendCommand
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _WriteSerial
  1352  0344                     _WriteSerial:
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _WriteSerial: [wreg+fsr1l+fsr1h+status,2+status,0]
  1356                           ;WriteSerial@buffer stored from wreg
  1357  0344  0020               	movlb	0	; select bank0
  1358  0345  00CF               	movwf	WriteSerial@buffer
  1359  0346                     l945:
  1360                           
  1361                           ;watchdog.c: 71: void WriteSerial(unsigned char *buffer,uint8_t len);watchdog.c: 72:    
      +                           {;watchdog.c: 73:     uint8_t i;;watchdog.c: 74:     for(i = 0;i < len;i++)
  1362  0346  01CE               	clrf	WriteSerial@i
  1363  0347  2B5D               	goto	l953
  1364  0348                     l947:
  1365                           
  1366                           ;watchdog.c: 75:     {;watchdog.c: 76:         TXREG = *buffer++;
  1367  0348  084F               	movf	WriteSerial@buffer,w
  1368  0349  0086               	movwf	6
  1369  034A  0187               	clrf	7
  1370  034B  0801               	movf	1,w
  1371  034C  0023               	movlb	3	; select bank3
  1372  034D  009A               	movwf	26	;volatile
  1373  034E                     l949:
  1374  034E  3001               	movlw	1
  1375  034F  0020               	movlb	0	; select bank0
  1376  0350  00CD               	movwf	??_WriteSerial
  1377  0351  084D               	movf	??_WriteSerial,w
  1378  0352  07CF               	addwf	WriteSerial@buffer,f
  1379  0353                     l73:	
  1380                           ;watchdog.c: 77:         while(TXSTAbits.TRMT == 0);
  1381                           
  1382  0353  0023               	movlb	3	; select bank3
  1383  0354  1C9E               	btfss	30,1	;volatile
  1384  0355  2B57               	goto	u321
  1385  0356  2B58               	goto	u320
  1386  0357                     u321:
  1387  0357  2B53               	goto	l73
  1388  0358                     u320:
  1389  0358                     l951:
  1390                           
  1391                           ;watchdog.c: 78:     }
  1392  0358  3001               	movlw	1
  1393  0359  0020               	movlb	0	; select bank0
  1394  035A  00CD               	movwf	??_WriteSerial
  1395  035B  084D               	movf	??_WriteSerial,w
  1396  035C  07CE               	addwf	WriteSerial@i,f
  1397  035D                     l953:
  1398  035D  084C               	movf	WriteSerial@len,w
  1399  035E  024E               	subwf	WriteSerial@i,w
  1400  035F  1C03               	skipc
  1401  0360  2B62               	goto	u331
  1402  0361  2B63               	goto	u330
  1403  0362                     u331:
  1404  0362  2B48               	goto	l947
  1405  0363                     u330:
  1406  0363                     l77:
  1407  0363  0008               	return
  1408  0364                     __end_of_WriteSerial:
  1409                           
  1410                           	psect	intentry
  1411  0004                     __pintentry:	
  1412 ;; *************** function _my_isr_routine *****************
  1413 ;; Defined at:
  1414 ;;		line 219 in file "watchdog.c"
  1415 ;; Parameters:    Size  Location     Type
  1416 ;;		None
  1417 ;; Auto vars:     Size  Location     Type
  1418 ;;  temp            2   12[COMMON] unsigned short 
  1419 ;; Return value:  Size  Location     Type
  1420 ;;                  1    wreg      void 
  1421 ;; Registers used:
  1422 ;;		wreg, status,2, status,0, pclath, cstack
  1423 ;; Tracked objects:
  1424 ;;		On entry : 0/0
  1425 ;;		On exit  : 0/0
  1426 ;;		Unchanged: 0/0
  1427 ;; Data sizes:     COMMON   BANK0   BANK1
  1428 ;;      Params:         0       0       0
  1429 ;;      Locals:         2       0       0
  1430 ;;      Temps:          3       0       0
  1431 ;;      Totals:         5       0       0
  1432 ;;Total ram usage:        5 bytes
  1433 ;; Hardware stack levels used:    1
  1434 ;; Hardware stack levels required when called:    1
  1435 ;; This function calls:
  1436 ;;		___aldiv
  1437 ;; This function is called by:
  1438 ;;		Interrupt level 1
  1439 ;; This function uses a non-reentrant model
  1440 ;;
  1441                           
  1442  0004                     _my_isr_routine:
  1443                           
  1444                           ;incstack = 0
  1445  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  1446                           
  1447                           ; Regs used in _my_isr_routine: [wreg+status,2+status,0+pclath+cstack]
  1448  0005  3180               	pagesel	$
  1449  0006                     i1l1125:
  1450                           
  1451                           ;watchdog.c: 220:     if (PIR1bits.TMR2IF == 1)
  1452  0006  0020               	movlb	0	; select bank0
  1453  0007  1C91               	btfss	17,1	;volatile
  1454  0008  280A               	goto	u56_21
  1455  0009  280B               	goto	u56_20
  1456  000A                     u56_21:
  1457  000A  28B3               	goto	i1l117
  1458  000B                     u56_20:
  1459  000B                     i1l1127:
  1460                           
  1461                           ;watchdog.c: 221:     {;watchdog.c: 222:         mainreset++;
  1462  000B  3001               	movlw	1
  1463  000C  07A0               	addwf	_mainreset,f
  1464  000D  3000               	movlw	0
  1465  000E  3DA1               	addwfc	_mainreset+1,f
  1466  000F  3000               	movlw	0
  1467  0010  3DA2               	addwfc	_mainreset+2,f
  1468  0011  3000               	movlw	0
  1469  0012  3DA3               	addwfc	_mainreset+3,f
  1470  0013                     i1l1129:
  1471                           
  1472                           ;watchdog.c: 223:         if (mainreset > 7714)
  1473  0013  0823               	movf	_mainreset+3,w
  1474  0014  1D03               	btfss	3,2
  1475  0015  2821               	goto	u57_20
  1476  0016  0822               	movf	_mainreset+2,w
  1477  0017  1D03               	btfss	3,2
  1478  0018  2821               	goto	u57_20
  1479  0019  3023               	movlw	35
  1480  001A  0220               	subwf	_mainreset,w
  1481  001B  301E               	movlw	30
  1482  001C  3B21               	subwfb	_mainreset+1,w
  1483  001D  1C03               	btfss	3,0
  1484  001E  2820               	goto	u57_21
  1485  001F  2821               	goto	u57_20
  1486  0020                     u57_21:
  1487  0020  2830               	goto	i1l1135
  1488  0021                     u57_20:
  1489  0021                     i1l1131:
  1490                           
  1491                           ;watchdog.c: 224:         {;watchdog.c: 225:             resettimer = 20;
  1492  0021  3014               	movlw	20
  1493  0022  0020               	movlb	0	; select bank0
  1494  0023  00B0               	movwf	_resettimer
  1495  0024  3000               	movlw	0
  1496  0025  00B1               	movwf	_resettimer+1
  1497  0026                     i1l1133:
  1498                           
  1499                           ;watchdog.c: 226:             pinreset = 1;
  1500  0026  01B8               	clrf	_pinreset
  1501  0027  0AB8               	incf	_pinreset,f
  1502                           
  1503                           ;watchdog.c: 227:             mainreset = 0;
  1504  0028  3000               	movlw	0
  1505  0029  00A3               	movwf	_mainreset+3
  1506  002A  3000               	movlw	0
  1507  002B  00A2               	movwf	_mainreset+2
  1508  002C  3000               	movlw	0
  1509  002D  00A1               	movwf	_mainreset+1
  1510  002E  3000               	movlw	0
  1511  002F  00A0               	movwf	_mainreset
  1512  0030                     i1l1135:
  1513                           
  1514                           ;watchdog.c: 229:         if(adcreset == 0)
  1515  0030  0020               	movlb	0	; select bank0
  1516  0031  0839               	movf	_adcreset,w
  1517  0032  1D03               	btfss	3,2
  1518  0033  2835               	goto	u58_21
  1519  0034  2836               	goto	u58_20
  1520  0035                     u58_21:
  1521  0035  28B1               	goto	i1l111
  1522  0036                     u58_20:
  1523  0036                     i1l1137:
  1524                           
  1525                           ;watchdog.c: 230:         {;watchdog.c: 231:         ADCON0bits.CHS = 1;
  1526  0036  0021               	movlb	1	; select bank1
  1527  0037  081D               	movf	29,w	;volatile
  1528  0038  3983               	andlw	-125
  1529  0039  3804               	iorlw	4
  1530  003A  009D               	movwf	29	;volatile
  1531  003B                     i1l1139:
  1532                           
  1533                           ;watchdog.c: 232:         ADCON0bits.ADGO = 1;
  1534  003B  149D               	bsf	29,1	;volatile
  1535  003C                     i1l112:	
  1536                           ;watchdog.c: 233:         while (ADCON0bits.nDONE != 0);
  1537                           
  1538  003C  189D               	btfsc	29,1	;volatile
  1539  003D  283F               	goto	u59_21
  1540  003E  2840               	goto	u59_20
  1541  003F                     u59_21:
  1542  003F  283C               	goto	i1l112
  1543  0040                     u59_20:
  1544  0040                     i1l1141:
  1545                           
  1546                           ;watchdog.c: 234:         uint16_t temp;;watchdog.c: 235:         temp = ADRESH;
  1547  0040  081C               	movf	28,w	;volatile
  1548  0041  00F9               	movwf	??_my_isr_routine
  1549  0042  01FA               	clrf	??_my_isr_routine+1
  1550  0043  0879               	movf	??_my_isr_routine,w
  1551  0044  00FC               	movwf	my_isr_routine@temp
  1552  0045  087A               	movf	??_my_isr_routine+1,w
  1553  0046  00FD               	movwf	my_isr_routine@temp+1
  1554  0047                     i1l1143:
  1555                           
  1556                           ;watchdog.c: 236:         temp = temp<<2;
  1557  0047  087D               	movf	my_isr_routine@temp+1,w
  1558  0048  00FA               	movwf	??_my_isr_routine+1
  1559  0049  087C               	movf	my_isr_routine@temp,w
  1560  004A  00F9               	movwf	??_my_isr_routine
  1561  004B  35F9               	lslf	??_my_isr_routine,f
  1562  004C  0DFA               	rlf	??_my_isr_routine+1,f
  1563  004D  35F9               	lslf	??_my_isr_routine,f
  1564  004E  0DFA               	rlf	??_my_isr_routine+1,f
  1565  004F  0879               	movf	??_my_isr_routine,w
  1566  0050  00FC               	movwf	my_isr_routine@temp
  1567  0051  087A               	movf	??_my_isr_routine+1,w
  1568  0052  00FD               	movwf	my_isr_routine@temp+1
  1569  0053                     i1l1145:
  1570                           
  1571                           ;watchdog.c: 237:         temp |= ((ADRESL>>6) & 0x03);
  1572  0053  081B               	movf	27,w	;volatile
  1573  0054  00F9               	movwf	??_my_isr_routine
  1574  0055  3006               	movlw	6
  1575  0056                     u60_25:
  1576  0056  36F9               	lsrf	??_my_isr_routine,f
  1577  0057  0B89               	decfsz	9,f
  1578  0058  2856               	goto	u60_25
  1579  0059  0879               	movf	??_my_isr_routine,w
  1580  005A  3903               	andlw	3
  1581  005B  00FA               	movwf	??_my_isr_routine+1
  1582  005C  01FB               	clrf	??_my_isr_routine+2
  1583  005D  087A               	movf	??_my_isr_routine+1,w
  1584  005E  04FC               	iorwf	my_isr_routine@temp,f
  1585  005F  087B               	movf	??_my_isr_routine+2,w
  1586  0060  04FD               	iorwf	my_isr_routine@temp+1,f
  1587                           
  1588                           ;watchdog.c: 238:         average += temp;
  1589  0061  087C               	movf	my_isr_routine@temp,w
  1590  0062  0020               	movlb	0	; select bank0
  1591  0063  07E3               	addwf	_average,f
  1592  0064  087D               	movf	my_isr_routine@temp+1,w
  1593  0065  3DE4               	addwfc	_average+1,f
  1594  0066  3000               	movlw	0
  1595  0067  3DE5               	addwfc	_average+2,f
  1596  0068  3DE6               	addwfc	_average+3,f
  1597  0069                     i1l1147:
  1598                           
  1599                           ;watchdog.c: 239:         buffpointer++;
  1600  0069  3001               	movlw	1
  1601  006A  00F9               	movwf	??_my_isr_routine
  1602  006B  0879               	movf	??_my_isr_routine,w
  1603  006C  07B6               	addwf	_buffpointer,f
  1604  006D                     i1l1149:
  1605                           
  1606                           ;watchdog.c: 240:         if (buffpointer > 29)
  1607  006D  301E               	movlw	30
  1608  006E  0236               	subwf	_buffpointer,w
  1609  006F  1C03               	skipc
  1610  0070  2872               	goto	u61_21
  1611  0071  2873               	goto	u61_20
  1612  0072                     u61_21:
  1613  0072  28B1               	goto	i1l111
  1614  0073                     u61_20:
  1615  0073                     i1l1151:
  1616                           
  1617                           ;watchdog.c: 241:         {;watchdog.c: 243:             average = average / 30;
  1618  0073  3000               	movlw	0
  1619  0074  00F3               	movwf	___aldiv@divisor+3
  1620  0075  3000               	movlw	0
  1621  0076  00F2               	movwf	___aldiv@divisor+2
  1622  0077  3000               	movlw	0
  1623  0078  00F1               	movwf	___aldiv@divisor+1
  1624  0079  301E               	movlw	30
  1625  007A  00F0               	movwf	___aldiv@divisor
  1626  007B  0866               	movf	_average+3,w
  1627  007C  00F7               	movwf	___aldiv@dividend+3
  1628  007D  0865               	movf	_average+2,w
  1629  007E  00F6               	movwf	___aldiv@dividend+2
  1630  007F  0864               	movf	_average+1,w
  1631  0080  00F5               	movwf	___aldiv@dividend+1
  1632  0081  0863               	movf	_average,w
  1633  0082  00F4               	movwf	___aldiv@dividend
  1634  0083  3182  224D  3180   	fcall	___aldiv
  1635  0086  0873               	movf	?___aldiv+3,w
  1636  0087  0020               	movlb	0	; select bank0
  1637  0088  00E6               	movwf	_average+3
  1638  0089  0872               	movf	?___aldiv+2,w
  1639  008A  00E5               	movwf	_average+2
  1640  008B  0871               	movf	?___aldiv+1,w
  1641  008C  00E4               	movwf	_average+1
  1642  008D  0870               	movf	?___aldiv,w
  1643  008E  00E3               	movwf	_average
  1644  008F                     i1l1153:
  1645                           
  1646                           ;watchdog.c: 244:             if (average < 10)
  1647  008F  1BE6               	btfsc	_average+3,7
  1648  0090  28A0               	goto	u62_20
  1649  0091  0866               	movf	_average+3,w
  1650  0092  1D03               	btfss	3,2
  1651  0093  289F               	goto	u62_21
  1652  0094  0865               	movf	_average+2,w
  1653  0095  1D03               	btfss	3,2
  1654  0096  289F               	goto	u62_21
  1655  0097  0864               	movf	_average+1,w
  1656  0098  1D03               	btfss	3,2
  1657  0099  289F               	goto	u62_21
  1658  009A  300A               	movlw	10
  1659  009B  0263               	subwf	_average,w
  1660  009C  1803               	btfsc	3,0
  1661  009D  289F               	goto	u62_21
  1662  009E  28A0               	goto	u62_20
  1663  009F                     u62_21:
  1664  009F  28A7               	goto	i1l1159
  1665  00A0                     u62_20:
  1666  00A0                     i1l1155:
  1667                           
  1668                           ;watchdog.c: 245:             {;watchdog.c: 246:                 resettimer = 20;
  1669  00A0  3014               	movlw	20
  1670  00A1  0020               	movlb	0	; select bank0
  1671  00A2  00B0               	movwf	_resettimer
  1672  00A3  3000               	movlw	0
  1673  00A4  00B1               	movwf	_resettimer+1
  1674  00A5                     i1l1157:
  1675                           
  1676                           ;watchdog.c: 247:                 pinreset = 1;
  1677  00A5  01B8               	clrf	_pinreset
  1678  00A6  0AB8               	incf	_pinreset,f
  1679  00A7                     i1l1159:
  1680                           
  1681                           ;watchdog.c: 251:             buffpointer = 0;
  1682  00A7  0020               	movlb	0	; select bank0
  1683  00A8  01B6               	clrf	_buffpointer
  1684  00A9                     i1l1161:
  1685                           
  1686                           ;watchdog.c: 252:             average = 0;
  1687  00A9  3000               	movlw	0
  1688  00AA  00E6               	movwf	_average+3
  1689  00AB  3000               	movlw	0
  1690  00AC  00E5               	movwf	_average+2
  1691  00AD  3000               	movlw	0
  1692  00AE  00E4               	movwf	_average+1
  1693  00AF  3000               	movlw	0
  1694  00B0  00E3               	movwf	_average
  1695  00B1                     i1l111:	
  1696                           ;watchdog.c: 254:         }
  1697                           
  1698                           
  1699                           ;watchdog.c: 255:         TMR2 = 0;
  1700  00B1  019A               	clrf	26	;volatile
  1701  00B2                     i1l1163:
  1702                           
  1703                           ;watchdog.c: 257:         PIR1bits.TMR2IF = 0;
  1704  00B2  1091               	bcf	17,1	;volatile
  1705  00B3                     i1l117:
  1706  00B3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1707  00B4  0009               	retfie
  1708  00B5                     __end_of_my_isr_routine:
  1709                           
  1710                           	psect	text4
  1711  024D                     __ptext4:	
  1712 ;; *************** function ___aldiv *****************
  1713 ;; Defined at:
  1714 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c99\common\aldiv.c"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  divisor         4    0[COMMON] long 
  1717 ;;  dividend        4    4[COMMON] long 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  quotient        4    2[BANK0 ] long 
  1720 ;;  sign            1    1[BANK0 ] unsigned char 
  1721 ;;  counter         1    0[BANK0 ] unsigned char 
  1722 ;; Return value:  Size  Location     Type
  1723 ;;                  4    0[COMMON] long 
  1724 ;; Registers used:
  1725 ;;		wreg, status,2, status,0
  1726 ;; Tracked objects:
  1727 ;;		On entry : 0/0
  1728 ;;		On exit  : 0/0
  1729 ;;		Unchanged: 0/0
  1730 ;; Data sizes:     COMMON   BANK0   BANK1
  1731 ;;      Params:         8       0       0
  1732 ;;      Locals:         0       6       0
  1733 ;;      Temps:          1       0       0
  1734 ;;      Totals:         9       6       0
  1735 ;;Total ram usage:       15 bytes
  1736 ;; Hardware stack levels used:    1
  1737 ;; This function calls:
  1738 ;;		Nothing
  1739 ;; This function is called by:
  1740 ;;		_my_isr_routine
  1741 ;; This function uses a non-reentrant model
  1742 ;;
  1743                           
  1744                           
  1745                           ;psect for function ___aldiv
  1746  024D                     ___aldiv:
  1747  024D                     i1l973:	
  1748                           ;incstack = 0
  1749                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1750                           
  1751  024D  0020               	movlb	0	; select bank0
  1752  024E  01C7               	clrf	___aldiv@sign
  1753  024F                     i1l975:
  1754  024F  1FF3               	btfss	___aldiv@divisor+3,7
  1755  0250  2A52               	goto	u34_21
  1756  0251  2A53               	goto	u34_20
  1757  0252                     u34_21:
  1758  0252  2A60               	goto	i1l332
  1759  0253                     u34_20:
  1760  0253                     i1l977:
  1761  0253  09F0               	comf	___aldiv@divisor,f
  1762  0254  09F1               	comf	___aldiv@divisor+1,f
  1763  0255  09F2               	comf	___aldiv@divisor+2,f
  1764  0256  09F3               	comf	___aldiv@divisor+3,f
  1765  0257  0AF0               	incf	___aldiv@divisor,f
  1766  0258  1903               	skipnz
  1767  0259  0AF1               	incf	___aldiv@divisor+1,f
  1768  025A  1903               	skipnz
  1769  025B  0AF2               	incf	___aldiv@divisor+2,f
  1770  025C  1903               	skipnz
  1771  025D  0AF3               	incf	___aldiv@divisor+3,f
  1772  025E  01C7               	clrf	___aldiv@sign
  1773  025F  0AC7               	incf	___aldiv@sign,f
  1774  0260                     i1l332:
  1775  0260  1FF7               	btfss	___aldiv@dividend+3,7
  1776  0261  2A63               	goto	u35_21
  1777  0262  2A64               	goto	u35_20
  1778  0263                     u35_21:
  1779  0263  2A73               	goto	i1l983
  1780  0264                     u35_20:
  1781  0264                     i1l979:
  1782  0264  09F4               	comf	___aldiv@dividend,f
  1783  0265  09F5               	comf	___aldiv@dividend+1,f
  1784  0266  09F6               	comf	___aldiv@dividend+2,f
  1785  0267  09F7               	comf	___aldiv@dividend+3,f
  1786  0268  0AF4               	incf	___aldiv@dividend,f
  1787  0269  1903               	skipnz
  1788  026A  0AF5               	incf	___aldiv@dividend+1,f
  1789  026B  1903               	skipnz
  1790  026C  0AF6               	incf	___aldiv@dividend+2,f
  1791  026D  1903               	skipnz
  1792  026E  0AF7               	incf	___aldiv@dividend+3,f
  1793  026F                     i1l981:
  1794  026F  3001               	movlw	1
  1795  0270  00F8               	movwf	??___aldiv
  1796  0271  0878               	movf	??___aldiv,w
  1797  0272  06C7               	xorwf	___aldiv@sign,f
  1798  0273                     i1l983:
  1799  0273  3000               	movlw	0
  1800  0274  00CB               	movwf	___aldiv@quotient+3
  1801  0275  3000               	movlw	0
  1802  0276  00CA               	movwf	___aldiv@quotient+2
  1803  0277  3000               	movlw	0
  1804  0278  00C9               	movwf	___aldiv@quotient+1
  1805  0279  3000               	movlw	0
  1806  027A  00C8               	movwf	___aldiv@quotient
  1807  027B                     i1l985:
  1808  027B  0873               	movf	___aldiv@divisor+3,w
  1809  027C  0472               	iorwf	___aldiv@divisor+2,w
  1810  027D  0471               	iorwf	___aldiv@divisor+1,w
  1811  027E  0470               	iorwf	___aldiv@divisor,w
  1812  027F  1903               	skipnz
  1813  0280  2A82               	goto	u36_21
  1814  0281  2A83               	goto	u36_20
  1815  0282                     u36_21:
  1816  0282  2AC4               	goto	i1l1005
  1817  0283                     u36_20:
  1818  0283                     i1l987:
  1819  0283  01C6               	clrf	___aldiv@counter
  1820  0284  0AC6               	incf	___aldiv@counter,f
  1821  0285  2A91               	goto	i1l991
  1822  0286                     i1l989:
  1823  0286  3001               	movlw	1
  1824  0287                     u37_25:
  1825  0287  35F0               	lslf	___aldiv@divisor,f
  1826  0288  0DF1               	rlf	___aldiv@divisor+1,f
  1827  0289  0DF2               	rlf	___aldiv@divisor+2,f
  1828  028A  0DF3               	rlf	___aldiv@divisor+3,f
  1829  028B  0B89               	decfsz	9,f
  1830  028C  2A87               	goto	u37_25
  1831  028D  3001               	movlw	1
  1832  028E  00F8               	movwf	??___aldiv
  1833  028F  0878               	movf	??___aldiv,w
  1834  0290  07C6               	addwf	___aldiv@counter,f
  1835  0291                     i1l991:
  1836  0291  1FF3               	btfss	___aldiv@divisor+3,7
  1837  0292  2A94               	goto	u38_21
  1838  0293  2A95               	goto	u38_20
  1839  0294                     u38_21:
  1840  0294  2A86               	goto	i1l989
  1841  0295                     u38_20:
  1842  0295                     i1l993:
  1843  0295  3001               	movlw	1
  1844  0296                     u39_25:
  1845  0296  35C8               	lslf	___aldiv@quotient,f
  1846  0297  0DC9               	rlf	___aldiv@quotient+1,f
  1847  0298  0DCA               	rlf	___aldiv@quotient+2,f
  1848  0299  0DCB               	rlf	___aldiv@quotient+3,f
  1849  029A  0B89               	decfsz	9,f
  1850  029B  2A96               	goto	u39_25
  1851  029C                     i1l995:
  1852  029C  0873               	movf	___aldiv@divisor+3,w
  1853  029D  0277               	subwf	___aldiv@dividend+3,w
  1854  029E  1D03               	skipz
  1855  029F  2AAA               	goto	u40_25
  1856  02A0  0872               	movf	___aldiv@divisor+2,w
  1857  02A1  0276               	subwf	___aldiv@dividend+2,w
  1858  02A2  1D03               	skipz
  1859  02A3  2AAA               	goto	u40_25
  1860  02A4  0871               	movf	___aldiv@divisor+1,w
  1861  02A5  0275               	subwf	___aldiv@dividend+1,w
  1862  02A6  1D03               	skipz
  1863  02A7  2AAA               	goto	u40_25
  1864  02A8  0870               	movf	___aldiv@divisor,w
  1865  02A9  0274               	subwf	___aldiv@dividend,w
  1866  02AA                     u40_25:
  1867  02AA  1C03               	skipc
  1868  02AB  2AAD               	goto	u40_21
  1869  02AC  2AAE               	goto	u40_20
  1870  02AD                     u40_21:
  1871  02AD  2AB7               	goto	i1l1001
  1872  02AE                     u40_20:
  1873  02AE                     i1l997:
  1874  02AE  0870               	movf	___aldiv@divisor,w
  1875  02AF  02F4               	subwf	___aldiv@dividend,f
  1876  02B0  0871               	movf	___aldiv@divisor+1,w
  1877  02B1  3BF5               	subwfb	___aldiv@dividend+1,f
  1878  02B2  0872               	movf	___aldiv@divisor+2,w
  1879  02B3  3BF6               	subwfb	___aldiv@dividend+2,f
  1880  02B4  0873               	movf	___aldiv@divisor+3,w
  1881  02B5  3BF7               	subwfb	___aldiv@dividend+3,f
  1882  02B6                     i1l999:
  1883  02B6  1448               	bsf	___aldiv@quotient,0
  1884  02B7                     i1l1001:
  1885  02B7  3001               	movlw	1
  1886  02B8                     u41_25:
  1887  02B8  36F3               	lsrf	___aldiv@divisor+3,f
  1888  02B9  0CF2               	rrf	___aldiv@divisor+2,f
  1889  02BA  0CF1               	rrf	___aldiv@divisor+1,f
  1890  02BB  0CF0               	rrf	___aldiv@divisor,f
  1891  02BC  0B89               	decfsz	9,f
  1892  02BD  2AB8               	goto	u41_25
  1893  02BE                     i1l1003:
  1894  02BE  3001               	movlw	1
  1895  02BF  02C6               	subwf	___aldiv@counter,f
  1896  02C0  1D03               	btfss	3,2
  1897  02C1  2AC3               	goto	u42_21
  1898  02C2  2AC4               	goto	u42_20
  1899  02C3                     u42_21:
  1900  02C3  2A95               	goto	i1l993
  1901  02C4                     u42_20:
  1902  02C4                     i1l1005:
  1903  02C4  0847               	movf	___aldiv@sign,w
  1904  02C5  1903               	btfsc	3,2
  1905  02C6  2AC8               	goto	u43_21
  1906  02C7  2AC9               	goto	u43_20
  1907  02C8                     u43_21:
  1908  02C8  2AD4               	goto	i1l1009
  1909  02C9                     u43_20:
  1910  02C9                     i1l1007:
  1911  02C9  09C8               	comf	___aldiv@quotient,f
  1912  02CA  09C9               	comf	___aldiv@quotient+1,f
  1913  02CB  09CA               	comf	___aldiv@quotient+2,f
  1914  02CC  09CB               	comf	___aldiv@quotient+3,f
  1915  02CD  0AC8               	incf	___aldiv@quotient,f
  1916  02CE  1903               	skipnz
  1917  02CF  0AC9               	incf	___aldiv@quotient+1,f
  1918  02D0  1903               	skipnz
  1919  02D1  0ACA               	incf	___aldiv@quotient+2,f
  1920  02D2  1903               	skipnz
  1921  02D3  0ACB               	incf	___aldiv@quotient+3,f
  1922  02D4                     i1l1009:
  1923  02D4  084B               	movf	___aldiv@quotient+3,w
  1924  02D5  00F3               	movwf	?___aldiv+3
  1925  02D6  084A               	movf	___aldiv@quotient+2,w
  1926  02D7  00F2               	movwf	?___aldiv+2
  1927  02D8  0849               	movf	___aldiv@quotient+1,w
  1928  02D9  00F1               	movwf	?___aldiv+1
  1929  02DA  0848               	movf	___aldiv@quotient,w
  1930  02DB  00F0               	movwf	?___aldiv
  1931  02DC                     i1l342:
  1932  02DC  0008               	return
  1933  02DD                     __end_of___aldiv:
  1934  007E                     btemp	set	126	;btemp
  1935  007E                     int$flags	set	126
  1936  007E                     wtemp0	set	126
  1937                           
  1938                           	psect	idloc
  1939                           
  1940                           ;Config register IDLOC0 @ 0x8000
  1941                           ;	unspecified, using default values
  1942  8000                     	org	32768
  1943  8000  3FFF               	dw	16383
  1944                           
  1945                           ;Config register IDLOC1 @ 0x8001
  1946                           ;	unspecified, using default values
  1947  8001                     	org	32769
  1948  8001  3FFF               	dw	16383
  1949                           
  1950                           ;Config register IDLOC2 @ 0x8002
  1951                           ;	unspecified, using default values
  1952  8002                     	org	32770
  1953  8002  3FFF               	dw	16383
  1954                           
  1955                           ;Config register IDLOC3 @ 0x8003
  1956                           ;	unspecified, using default values
  1957  8003                     	org	32771
  1958  8003  3FFF               	dw	16383
  1959                           
  1960                           	psect	config
  1961                           
  1962                           ;Config register CONFIG1 @ 0x8007
  1963                           ;	Oscillator Selection
  1964                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1965                           ;	Watchdog Timer Enable
  1966                           ;	WDTE = OFF, WDT disabled
  1967                           ;	Power-up Timer Enable
  1968                           ;	PWRTE = OFF, PWRT disabled
  1969                           ;	MCLR Pin Function Select
  1970                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1971                           ;	Flash Program Memory Code Protection
  1972                           ;	CP = OFF, Program memory code protection is disabled
  1973                           ;	Data Memory Code Protection
  1974                           ;	CPD = OFF, Data memory code protection is disabled
  1975                           ;	Brown-out Reset Enable
  1976                           ;	BOREN = OFF, Brown-out Reset disabled
  1977                           ;	Clock Out Enable
  1978                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1979                           ;	Internal/External Switchover
  1980                           ;	IESO = ON, Internal/External Switchover mode is enabled
  1981                           ;	Fail-Safe Clock Monitor Enable
  1982                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1983  8007                     	org	32775
  1984  8007  39E4               	dw	14820
  1985                           
  1986                           ;Config register CONFIG2 @ 0x8008
  1987                           ;	Flash Memory Self-Write Protection
  1988                           ;	WRT = OFF, Write protection off
  1989                           ;	PLL Enable
  1990                           ;	PLLEN = OFF, 4x PLL disabled
  1991                           ;	Stack Overflow/Underflow Reset Enable
  1992                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1993                           ;	Brown-out Reset Voltage Selection
  1994                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1995                           ;	Low-Voltage Programming Enable
  1996                           ;	LVP = ON, Low-voltage programming enabled
  1997  8008                     	org	32776
  1998  8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         38
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     29      71
    BANK1            32      0       0

Pointer List with Targets:

    WriteSerial@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> buffer(BANK0[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _my_isr_routine in COMMON

    _my_isr_routine->___aldiv

Critical Paths under _main in BANK0

    _main->_SendCommand
    _SendCommand->_WriteSerial

Critical Paths under _my_isr_routine in BANK0

    _my_isr_routine->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_isr_routine in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1376
                                             27 BANK0      2     2      0
                        _SendCommand
 ---------------------------------------------------------------------------------
 (1) _SendCommand                                         17    15      2    1376
                                             10 BANK0     17    15      2
                        _WriteSerial
 ---------------------------------------------------------------------------------
 (2) _WriteSerial                                          4     3      1     178
                                              6 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _my_isr_routine                                       5     5      0     499
                                              9 COMMON     5     5      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendCommand
     _WriteSerial

 _my_isr_routine (ROOT)
   ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      55       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1D      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      55       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Fri Apr 14 17:59:43 2023

                     l80 0343                       l73 0353                       l77 0363  
                     l88 019F                       l97 01ED                       l99 01E3  
                    l951 0358                      l953 035D                      l945 0346  
                    l961 02F4                      l947 0348                      l971 033B  
                    l963 02F8                      l955 02DF                      l949 034E  
                    l965 0329                      l957 02EF                      l967 0333  
                    l959 02F0                      l969 0337                      u320 0358  
                    u321 0357                      u330 0363                      u331 0362  
                    u500 01C5                      u501 01C4                      u510 01CE  
                    _PR2 001B                      u511 01CD                      u520 01D8  
                    u440 0167                      u521 01D7                      u441 0166  
                    u530 01DE                      u450 0199                      u531 01DD  
                    u451 0198                      u540 01E3                      u460 01A3  
                    u541 01E2                      u461 01A2                      u550 01F9  
                    u470 01A9                      u551 01F8                      u471 01A8  
                    u480 01B3                      u481 01B2                      u490 01BC  
                    u707 0248                      u491 01BB                      u637 0100  
                    u647 0117                      u657 012C                      u667 016D  
                    u677 01FF                      u687 0216                      u697 022B  
   __size_of_WriteSerial 0020                      wreg 0009                     l1101 01D8  
                   l1021 00E6                     l1013 00D1                     l1111 0206  
                   l1103 01D9                     l1031 00EC                     l1023 00E7  
                   l1015 00DC                     l1113 0210                     l1121 023E  
                   l1105 01DE                     l1041 00F5                     l1033 00ED  
                   l1025 00E8                     l1017 00E3                     l1115 0225  
                   l1107 01F3                     l1123 0247                     l1051 0111  
                   l1043 00F7                     l1035 00EE                     l1027 00E9  
                   l1019 00E4                     l1117 0232                     l1109 01F9  
                   l1061 0146                     l1053 011E                     l1045 00F8  
                   l1037 00F0                     l1029 00EA                     l1119 023C  
                   l1071 017E                     l1063 014F                     l1055 0126  
                   l1047 00FA                     l1039 00F2                     l1081 01A9  
                   l1073 0187                     l1065 0157                     l1057 0133  
                   l1049 0107                     l1091 01BE                     l1083 01AC  
                   l1075 0199                     l1067 0167                     l1059 013D  
                   l1093 01C5                     l1085 01B3                     l1077 019E  
                   l1069 0174                     l1095 01C7                     l1087 01B5  
                   l1079 01A3                     l1097 01CE                     l1089 01BC  
                   l1099 01D2                     _TMR2 001A                     _main 00D1  
                   fsr0h 0005                     fsr1h 0007                     indf0 0000  
                   fsr0l 0004                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     start 00B5          __end_of___aldiv 02DD  
                  ?_main 0070                    i1l111 00B1                    i1l112 003C  
                  i1l117 00B3                    i1l332 0260                    i1l342 02DC  
                  i1l981 026F                    i1l973 024D                    i1l991 0291  
                  i1l983 0273                    i1l975 024F                    i1l993 0295  
                  i1l985 027B                    i1l977 0253                    i1l995 029C  
                  i1l987 0283                    i1l979 0264                    i1l997 02AE  
                  i1l989 0286                    i1l999 02B6                    u40_20 02AE  
                  u40_21 02AD                    u40_25 02AA                    u41_25 02B8  
                  u42_20 02C4                    u34_20 0253                    u42_21 02C3  
                  u34_21 0252                    u43_20 02C9                    u35_20 0264  
                  u43_21 02C8                    u35_21 0263                    u36_20 0283  
                  u36_21 0282                    u60_25 0056                    u61_20 0073  
                  u61_21 0072                    u37_25 0287                    u38_20 0295  
                  u62_20 00A0                    u38_21 0294                    u62_21 009F  
                  u39_25 0296                    u56_20 000B                    u56_21 000A  
                  u57_20 0021                    u57_21 0020                    u58_20 0036  
                  u58_21 0035                    u59_20 0040                    u59_21 003F  
                  _TXREG 019A                    _timer 002C                    status 0003  
                  wtemp0 007E          __initialization 00B6            ??_SendCommand 0052  
           __end_of_main 024D                   ??_main 0061                   _ADRESH 009C  
                 _ADRESL 009B                   i1l1001 02B7                   i1l1003 02BE  
                 i1l1005 02C4                   i1l1007 02C9                   i1l1009 02D4  
                 i1l1131 0021                   i1l1141 0040                   i1l1133 0026  
                 i1l1125 0006                   i1l1151 0073                   i1l1143 0047  
                 i1l1135 0030                   i1l1127 000B                   i1l1161 00A9  
                 i1l1153 008F                   i1l1145 0053                   i1l1137 0036  
                 i1l1129 0013                   i1l1163 00B2                   i1l1155 00A0  
                 i1l1147 0069                   i1l1139 003B                   i1l1157 00A5  
                 i1l1149 006D                   i1l1159 00A7                   _SPBRGH 019C  
                 _SPBRGL 019B                ??___aldiv 0078                   _buffer 003A  
    __end_of_SendCommand 0344  __end_of__initialization 00CE           __pcstackCOMMON 0070  
           __pidataBANK0 036A               __pbssBANK0 0020           WriteSerial@len 004C  
           WriteSerial@i 004E               __pmaintext 00D1              _SendCommand 02DD  
             __pintentry 0004            ??_WriteSerial 004D  __size_of_my_isr_routine 00B1  
                ___aldiv 024D                  __ptext1 02DD                  __ptext2 0344  
                __ptext4 024D                  _average 0063                _T2CONbits 001C  
       ___aldiv@dividend 0074      __end_of_WriteSerial 0364                  clrloop0 0365  
   end_of_initialization 00CE       SendCommand@command 005E                _RCSTAbits 019D  
       ___aldiv@quotient 0048               _resettimer 0030                _TRISAbits 008C  
              _TXSTAbits 019E              _BAUDCONbits 019F              _WriteSerial 0344  
    start_initialization 00B6           _my_isr_routine 0004             ?_SendCommand 0050  
            __pdataBANK0 0063                ___latbits 0000            __pcstackBANK0 0046  
 __end_of_my_isr_routine 00B5        WriteSerial@buffer 004F                 ?___aldiv 0070  
              _mainreset 0020          ?_my_isr_routine 0070                _laststate 0034  
        ___aldiv@divisor 0070          ___aldiv@counter 0046                 _LATAbits 010C  
              clear_ram0 0364                 _PIE1bits 0091                 _PIR1bits 0011  
            _buffpointer 0036               _ADCON0bits 009D               _ADCON1bits 009E  
       __size_of___aldiv 0090     __size_of_SendCommand 0067             ?_WriteSerial 004C  
             _ANSELAbits 018C                 _adcreset 0039             _sendcommands 0037  
               _actstate 0032            __size_of_main 017C                 _pinreset 0038  
               _pintimer 0028                 int$flags 007E                 _voltimer 0024  
             _INTCONbits 000B               _FVRCONbits 0117      SendCommand@checksum 005F  
               intlevel1 0000          SendCommand@par1 0050          SendCommand@par2 0051  
       ??_my_isr_routine 0079             ___aldiv@sign 0047       my_isr_routine@temp 007C  
