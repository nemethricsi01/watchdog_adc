

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Mar 21 18:17:29 2023

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	12F1822
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC12F1822 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0015                     	;# 
    68  0016                     	;# 
    69  0016                     	;# 
    70  0017                     	;# 
    71  0018                     	;# 
    72  0019                     	;# 
    73  001A                     	;# 
    74  001B                     	;# 
    75  001C                     	;# 
    76  001E                     	;# 
    77  001F                     	;# 
    78  008C                     	;# 
    79  0091                     	;# 
    80  0092                     	;# 
    81  0095                     	;# 
    82  0096                     	;# 
    83  0097                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009E                     	;# 
    92  010C                     	;# 
    93  0111                     	;# 
    94  0112                     	;# 
    95  0115                     	;# 
    96  0116                     	;# 
    97  0117                     	;# 
    98  0118                     	;# 
    99  0119                     	;# 
   100  011A                     	;# 
   101  011B                     	;# 
   102  011D                     	;# 
   103  011D                     	;# 
   104  018C                     	;# 
   105  0191                     	;# 
   106  0191                     	;# 
   107  0192                     	;# 
   108  0193                     	;# 
   109  0193                     	;# 
   110  0193                     	;# 
   111  0194                     	;# 
   112  0195                     	;# 
   113  0196                     	;# 
   114  0199                     	;# 
   115  019A                     	;# 
   116  019B                     	;# 
   117  019B                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019C                     	;# 
   121  019C                     	;# 
   122  019D                     	;# 
   123  019E                     	;# 
   124  019F                     	;# 
   125  020C                     	;# 
   126  0211                     	;# 
   127  0211                     	;# 
   128  0212                     	;# 
   129  0212                     	;# 
   130  0213                     	;# 
   131  0213                     	;# 
   132  0214                     	;# 
   133  0214                     	;# 
   134  0215                     	;# 
   135  0215                     	;# 
   136  0215                     	;# 
   137  0216                     	;# 
   138  0216                     	;# 
   139  0217                     	;# 
   140  0217                     	;# 
   141  0291                     	;# 
   142  0291                     	;# 
   143  0292                     	;# 
   144  0293                     	;# 
   145  0294                     	;# 
   146  0295                     	;# 
   147  0295                     	;# 
   148  0296                     	;# 
   149  0391                     	;# 
   150  0392                     	;# 
   151  0393                     	;# 
   152  039A                     	;# 
   153  039C                     	;# 
   154  039D                     	;# 
   155  039E                     	;# 
   156  039F                     	;# 
   157  0FE4                     	;# 
   158  0FE5                     	;# 
   159  0FE6                     	;# 
   160  0FE7                     	;# 
   161  0FE8                     	;# 
   162  0FE9                     	;# 
   163  0FEA                     	;# 
   164  0FEB                     	;# 
   165  0FED                     	;# 
   166  0FEE                     	;# 
   167  0FEF                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  008C                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  0111                     	;# 
   210  0112                     	;# 
   211  0115                     	;# 
   212  0116                     	;# 
   213  0117                     	;# 
   214  0118                     	;# 
   215  0119                     	;# 
   216  011A                     	;# 
   217  011B                     	;# 
   218  011D                     	;# 
   219  011D                     	;# 
   220  018C                     	;# 
   221  0191                     	;# 
   222  0191                     	;# 
   223  0192                     	;# 
   224  0193                     	;# 
   225  0193                     	;# 
   226  0193                     	;# 
   227  0194                     	;# 
   228  0195                     	;# 
   229  0196                     	;# 
   230  0199                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019C                     	;# 
   237  019C                     	;# 
   238  019D                     	;# 
   239  019E                     	;# 
   240  019F                     	;# 
   241  020C                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0294                     	;# 
   262  0295                     	;# 
   263  0295                     	;# 
   264  0296                     	;# 
   265  0391                     	;# 
   266  0392                     	;# 
   267  0393                     	;# 
   268  039A                     	;# 
   269  039C                     	;# 
   270  039D                     	;# 
   271  039E                     	;# 
   272  039F                     	;# 
   273  0FE4                     	;# 
   274  0FE5                     	;# 
   275  0FE6                     	;# 
   276  0FE7                     	;# 
   277  0FE8                     	;# 
   278  0FE9                     	;# 
   279  0FEA                     	;# 
   280  0FEB                     	;# 
   281  0FED                     	;# 
   282  0FEE                     	;# 
   283  0FEF                     	;# 
   284  000C                     _PORTAbits	set	12
   285  009C                     _ADRESH	set	156
   286  009E                     _ADCON1bits	set	158
   287  009D                     _ADCON0bits	set	157
   288  008C                     _TRISAbits	set	140
   289  010C                     _LATAbits	set	268
   290  0117                     _FVRCONbits	set	279
   291  019B                     _SPBRGL	set	411
   292  019C                     _SPBRGH	set	412
   293  019F                     _BAUDCONbits	set	415
   294  019D                     _RCSTAbits	set	413
   295  018C                     _ANSELAbits	set	396
   296  019E                     _TXSTAbits	set	414
   297  019A                     _TXREG	set	410
   298                           
   299                           	psect	cinit
   300  07F3                     start_initialization:	
   301                           ; #config settings
   302                           
   303  07F3                     __initialization:
   304                           
   305                           ; Clear objects allocated to COMMON
   306  07F3  01FB               	clrf	__pbssCOMMON& (0+127)
   307  07F4  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   308  07F5  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   309                           
   310                           ; Clear objects allocated to BANK0
   311  07F6  3020               	movlw	low __pbssBANK0
   312  07F7  0084               	movwf	4
   313  07F8  3000               	movlw	high __pbssBANK0
   314  07F9  0085               	movwf	5
   315  07FA  3022               	movlw	34
   316  07FB  3186  263C  3187   	fcall	clear_ram0
   317  07FE                     end_of_initialization:	
   318                           ;End of C runtime variable initialization code
   319                           
   320  07FE                     __end_of__initialization:
   321  07FE  0020               	movlb	0
   322  07FF  2EC5               	ljmp	_main	;jump to C main() function
   323                           
   324                           	psect	bssCOMMON
   325  007B                     __pbssCOMMON:
   326  007B                     _sendcommands:
   327  007B                     	ds	1
   328  007C                     _pinreset:
   329  007C                     	ds	1
   330  007D                     _adcreset:
   331  007D                     	ds	1
   332                           
   333                           	psect	bssBANK0
   334  0020                     __pbssBANK0:
   335  0020                     _pintimer:
   336  0020                     	ds	4
   337  0024                     _timer:
   338  0024                     	ds	4
   339  0028                     _resettimer:
   340  0028                     	ds	2
   341  002A                     _actstate:
   342  002A                     	ds	2
   343  002C                     _laststate:
   344  002C                     	ds	2
   345  002E                     _buffer:
   346  002E                     	ds	20
   347                           
   348                           	psect	clrtext
   349  063C                     clear_ram0:	
   350                           ;	Called with FSR0 containing the base address, and
   351                           ;	WREG with the size to clear
   352                           
   353  063C  0064               	clrwdt	;clear the watchdog before getting into this loop
   354  063D                     clrloop0:
   355  063D  0180               	clrf	0	;clear RAM location pointed to by FSR
   356  063E  3101               	addfsr 0,1
   357  063F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   358  0640  2E3D               	goto	clrloop0	;have we reached the end yet?
   359  0641  3400               	retlw	0	;all done for this memory range, return
   360                           
   361                           	psect	cstackCOMMON
   362  0070                     __pcstackCOMMON:
   363  0070                     ?_WriteSerial:
   364  0070                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     WriteSerial@len:	
   368                           ; 1 bytes @ 0x0
   369                           
   370                           
   371                           ; 1 bytes @ 0x0
   372  0070                     	ds	1
   373  0071                     ??_WriteSerial:
   374                           
   375                           ; 1 bytes @ 0x1
   376  0071                     	ds	1
   377  0072                     WriteSerial@i:
   378                           
   379                           ; 1 bytes @ 0x2
   380  0072                     	ds	1
   381  0073                     WriteSerial@buffer:
   382                           
   383                           ; 1 bytes @ 0x3
   384  0073                     	ds	1
   385  0074                     ?_SendCommand:
   386  0074                     SendCommand@par1:	
   387                           ; 1 bytes @ 0x4
   388                           
   389                           
   390                           ; 1 bytes @ 0x4
   391  0074                     	ds	1
   392  0075                     SendCommand@par2:
   393                           
   394                           ; 1 bytes @ 0x5
   395  0075                     	ds	1
   396  0076                     SendCommand@command:
   397                           
   398                           ; 1 bytes @ 0x6
   399  0076                     	ds	1
   400  0077                     SendCommand@checksum:
   401                           
   402                           ; 2 bytes @ 0x7
   403  0077                     	ds	2
   404  0079                     ??_main:
   405                           
   406                           ; 1 bytes @ 0x9
   407  0079                     	ds	2
   408                           
   409                           	psect	cstackBANK0
   410  0042                     __pcstackBANK0:
   411  0042                     ??_SendCommand:
   412                           
   413                           ; 1 bytes @ 0x0
   414  0042                     	ds	12
   415                           
   416                           	psect	maintext
   417  06C5                     __pmaintext:	
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 94 in file "watchdog.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : B1F/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1
   437 ;;      Params:         0       0       0
   438 ;;      Locals:         0       0       0
   439 ;;      Temps:          2       0       0
   440 ;;      Totals:         2       0       0
   441 ;;Total ram usage:        2 bytes
   442 ;; Hardware stack levels required when called:    2
   443 ;; This function calls:
   444 ;;		_SendCommand
   445 ;; This function is called by:
   446 ;;		Startup code after reset
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           
   451                           ;psect for function _main
   452  06C5                     _main:
   453  06C5                     l843:	
   454                           ;incstack = 0
   455                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   456                           
   457                           
   458                           ;watchdog.c: 95:     TRISAbits.TRISA2 = 0;
   459  06C5  0021               	movlb	1	; select bank1
   460  06C6  110C               	bcf	12,2	;volatile
   461                           
   462                           ;watchdog.c: 96:     TRISAbits.TRISA0 = 0;
   463  06C7  100C               	bcf	12,0	;volatile
   464                           
   465                           ;watchdog.c: 97:     TRISAbits.TRISA5 = 0;
   466  06C8  128C               	bcf	12,5	;volatile
   467                           
   468                           ;watchdog.c: 98:     TRISAbits.TRISA1 = 1;
   469  06C9  148C               	bsf	12,1	;volatile
   470                           
   471                           ;watchdog.c: 99:     TRISAbits.TRISA4 = 1;
   472  06CA  160C               	bsf	12,4	;volatile
   473                           
   474                           ;watchdog.c: 100:     ANSELAbits.ANSA1 = 0;
   475  06CB  0023               	movlb	3	; select bank3
   476  06CC  108C               	bcf	12,1	;volatile
   477                           
   478                           ;watchdog.c: 101:     ANSELAbits.ANSA0 = 0;
   479  06CD  100C               	bcf	12,0	;volatile
   480  06CE                     l845:
   481                           
   482                           ;watchdog.c: 102:     ADCON0bits.CHS = 0b00011;
   483  06CE  0021               	movlb	1	; select bank1
   484  06CF  081D               	movf	29,w	;volatile
   485  06D0  3983               	andlw	-125
   486  06D1  380C               	iorlw	12
   487  06D2  009D               	movwf	29	;volatile
   488  06D3                     l847:
   489                           
   490                           ;watchdog.c: 103:     ADCON0bits.ADON = 1;
   491  06D3  141D               	bsf	29,0	;volatile
   492                           
   493                           ;watchdog.c: 104:     ADCON1bits.ADPREF = 0b11;
   494  06D4  3003               	movlw	3
   495  06D5  049E               	iorwf	30,f	;volatile
   496                           
   497                           ;watchdog.c: 105:     FVRCONbits.ADFVR = 0b10;
   498  06D6  0022               	movlb	2	; select bank2
   499  06D7  0817               	movf	23,w	;volatile
   500  06D8  39FC               	andlw	-4
   501  06D9  3802               	iorlw	2
   502  06DA  0097               	movwf	23	;volatile
   503  06DB                     l849:
   504                           
   505                           ;watchdog.c: 106:     FVRCONbits.FVREN = 1;
   506  06DB  1797               	bsf	23,7	;volatile
   507  06DC                     l851:
   508                           
   509                           ;watchdog.c: 108:     TXSTAbits.BRGH = 1;
   510  06DC  0023               	movlb	3	; select bank3
   511  06DD  151E               	bsf	30,2	;volatile
   512  06DE                     l853:
   513                           
   514                           ;watchdog.c: 109:     TXSTAbits.TXEN = 1;
   515  06DE  169E               	bsf	30,5	;volatile
   516  06DF                     l855:
   517                           
   518                           ;watchdog.c: 110:     RCSTAbits.SPEN = 1;
   519  06DF  179D               	bsf	29,7	;volatile
   520  06E0                     l857:
   521                           
   522                           ;watchdog.c: 111:     BAUDCONbits.BRG16 = 1;
   523  06E0  159F               	bsf	31,3	;volatile
   524  06E1                     l859:
   525                           
   526                           ;watchdog.c: 112:     SPBRGH = 0;
   527  06E1  019C               	clrf	28	;volatile
   528  06E2                     l861:
   529                           
   530                           ;watchdog.c: 113:     SPBRGL = 12;
   531  06E2  300C               	movlw	12
   532  06E3  009B               	movwf	27	;volatile
   533  06E4                     l863:
   534                           
   535                           ;watchdog.c: 116:     _delay((unsigned long)((2000)*(500000/4000.0)));
   536  06E4  3002               	movlw	2
   537  06E5  00FA               	movwf	??_main+1
   538  06E6  3045               	movlw	69
   539  06E7  00F9               	movwf	??_main
   540  06E8  30AA               	movlw	170
   541  06E9                     u317:
   542  06E9  0B89               	decfsz	9,f
   543  06EA  2EE9               	goto	u317
   544  06EB  0BF9               	decfsz	??_main,f
   545  06EC  2EE9               	goto	u317
   546  06ED  0BFA               	decfsz	??_main+1,f
   547  06EE  2EE9               	goto	u317
   548  06EF                     l865:
   549                           
   550                           ;watchdog.c: 117:     SendCommand(0x06,0,16);
   551  06EF  01F4               	clrf	SendCommand@par1
   552  06F0  3010               	movlw	16
   553  06F1  00F9               	movwf	??_main
   554  06F2  0879               	movf	??_main,w
   555  06F3  00F5               	movwf	SendCommand@par2
   556  06F4  3006               	movlw	6
   557  06F5  3186  265E  3186   	fcall	_SendCommand
   558  06F8                     l867:
   559                           
   560                           ;watchdog.c: 118:     _delay((unsigned long)((200)*(500000/4000.0)));
   561  06F8  3021               	movlw	33
   562  06F9  00F9               	movwf	??_main
   563  06FA  3076               	movlw	118
   564  06FB                     u327:
   565  06FB  0B89               	decfsz	9,f
   566  06FC  2EFB               	goto	u327
   567  06FD  0BF9               	decfsz	??_main,f
   568  06FE  2EFB               	goto	u327
   569  06FF  3200               	nop2
   570  0700                     l869:
   571                           
   572                           ;watchdog.c: 119:     SendCommand(0x11,0,1);
   573  0700  01F4               	clrf	SendCommand@par1
   574  0701  01F5               	clrf	SendCommand@par2
   575  0702  0AF5               	incf	SendCommand@par2,f
   576  0703  3011               	movlw	17
   577  0704  3186  265E  3186   	fcall	_SendCommand
   578  0707                     l871:
   579                           
   580                           ;watchdog.c: 120:     _delay((unsigned long)((500)*(500000/4000.0)));
   581  0707  3052               	movlw	82
   582  0708  00F9               	movwf	??_main
   583  0709  302A               	movlw	42
   584  070A                     u337:
   585  070A  0B89               	decfsz	9,f
   586  070B  2F0A               	goto	u337
   587  070C  0BF9               	decfsz	??_main,f
   588  070D  2F0A               	goto	u337
   589  070E                     l873:
   590                           
   591                           ;watchdog.c: 121:     SendCommand(0x06,0,16);
   592  070E  01F4               	clrf	SendCommand@par1
   593  070F  3010               	movlw	16
   594  0710  00F9               	movwf	??_main
   595  0711  0879               	movf	??_main,w
   596  0712  00F5               	movwf	SendCommand@par2
   597  0713  3006               	movlw	6
   598  0714  3186  265E  3186   	fcall	_SendCommand
   599  0717                     l875:
   600                           
   601                           ;watchdog.c: 122:     pintimer = 0;
   602  0717  3000               	movlw	0
   603  0718  0020               	movlb	0	; select bank0
   604  0719  00A3               	movwf	_pintimer+3
   605  071A  3000               	movlw	0
   606  071B  00A2               	movwf	_pintimer+2
   607  071C  3000               	movlw	0
   608  071D  00A1               	movwf	_pintimer+1
   609  071E  3000               	movlw	0
   610  071F  00A0               	movwf	_pintimer
   611  0720                     l877:
   612                           
   613                           ;watchdog.c: 124:     {;watchdog.c: 125:         timer++;
   614  0720  3001               	movlw	1
   615  0721  0020               	movlb	0	; select bank0
   616  0722  07A4               	addwf	_timer,f
   617  0723  3000               	movlw	0
   618  0724  3DA5               	addwfc	_timer+1,f
   619  0725  3000               	movlw	0
   620  0726  3DA6               	addwfc	_timer+2,f
   621  0727  3000               	movlw	0
   622  0728  3DA7               	addwfc	_timer+3,f
   623  0729                     l879:
   624                           
   625                           ;watchdog.c: 127:         if(timer >100)
   626  0729  1BA7               	btfsc	_timer+3,7
   627  072A  2F39               	goto	u181
   628  072B  0827               	movf	_timer+3,w
   629  072C  1D03               	btfss	3,2
   630  072D  2F3A               	goto	u180
   631  072E  0826               	movf	_timer+2,w
   632  072F  1D03               	btfss	3,2
   633  0730  2F3A               	goto	u180
   634  0731  0825               	movf	_timer+1,w
   635  0732  1D03               	btfss	3,2
   636  0733  2F3A               	goto	u180
   637  0734  3065               	movlw	101
   638  0735  0224               	subwf	_timer,w
   639  0736  1C03               	btfss	3,0
   640  0737  2F39               	goto	u181
   641  0738  2F3A               	goto	u180
   642  0739                     u181:
   643  0739  2FED               	goto	l935
   644  073A                     u180:
   645  073A                     l881:
   646                           
   647                           ;watchdog.c: 128:         {;watchdog.c: 129:             ADCON0bits.ADGO = 1;
   648  073A  0021               	movlb	1	; select bank1
   649  073B  149D               	bsf	29,1	;volatile
   650  073C                     l67:	
   651                           ;watchdog.c: 130:             while (ADCON0bits.nDONE != 0);
   652                           
   653  073C  189D               	btfsc	29,1	;volatile
   654  073D  2F3F               	goto	u191
   655  073E  2F40               	goto	u190
   656  073F                     u191:
   657  073F  2F3C               	goto	l67
   658  0740                     u190:
   659  0740                     l883:
   660                           
   661                           ;watchdog.c: 131:             if(ADRESH < 125)
   662  0740  307D               	movlw	125
   663  0741  021C               	subwf	28,w	;volatile
   664  0742  1803               	skipnc
   665  0743  2F45               	goto	u201
   666  0744  2F46               	goto	u200
   667  0745                     u201:
   668  0745  2F48               	goto	l887
   669  0746                     u200:
   670  0746                     l885:
   671                           
   672                           ;watchdog.c: 132:             {;watchdog.c: 133:                 adcreset = 1;
   673  0746  01FD               	clrf	_adcreset
   674  0747  0AFD               	incf	_adcreset,f
   675  0748                     l887:
   676                           
   677                           ;watchdog.c: 135:             if(ADRESH > 146)
   678  0748  3093               	movlw	147
   679  0749  021C               	subwf	28,w	;volatile
   680  074A  1C03               	skipc
   681  074B  2F4D               	goto	u211
   682  074C  2F4E               	goto	u210
   683  074D                     u211:
   684  074D  2F4F               	goto	l891
   685  074E                     u210:
   686  074E                     l889:
   687                           
   688                           ;watchdog.c: 136:             {;watchdog.c: 137:                 adcreset = 0;
   689  074E  01FD               	clrf	_adcreset
   690  074F                     l891:
   691                           
   692                           ;watchdog.c: 139:             if(ADRESH < 160)
   693  074F  30A0               	movlw	160
   694  0750  021C               	subwf	28,w	;volatile
   695  0751  1803               	skipnc
   696  0752  2F54               	goto	u221
   697  0753  2F55               	goto	u220
   698  0754                     u221:
   699  0754  2F57               	goto	l895
   700  0755                     u220:
   701  0755                     l893:
   702                           
   703                           ;watchdog.c: 140:             {;watchdog.c: 141:                 LATAbits.LATA5 = 1;
   704  0755  0022               	movlb	2	; select bank2
   705  0756  168C               	bsf	12,5	;volatile
   706  0757                     l895:
   707                           
   708                           ;watchdog.c: 143:             if(ADRESH > 158)
   709  0757  309F               	movlw	159
   710  0758  0021               	movlb	1	; select bank1
   711  0759  021C               	subwf	28,w	;volatile
   712  075A  1C03               	skipc
   713  075B  2F5D               	goto	u231
   714  075C  2F5E               	goto	u230
   715  075D                     u231:
   716  075D  2F60               	goto	l73
   717  075E                     u230:
   718  075E                     l897:
   719                           
   720                           ;watchdog.c: 144:             {;watchdog.c: 145:                 LATAbits.LATA5 = 0;
   721  075E  0022               	movlb	2	; select bank2
   722  075F  128C               	bcf	12,5	;volatile
   723  0760                     l73:	
   724                           ;watchdog.c: 146:             }
   725                           
   726                           
   727                           ;watchdog.c: 148:             if(PORTAbits.RA1 == 1)
   728  0760  0020               	movlb	0	; select bank0
   729  0761  1C8C               	btfss	12,1	;volatile
   730  0762  2F64               	goto	u241
   731  0763  2F65               	goto	u240
   732  0764                     u241:
   733  0764  2F6D               	goto	l901
   734  0765                     u240:
   735  0765                     l899:
   736                           
   737                           ;watchdog.c: 149:             {;watchdog.c: 150:                pintimer++;
   738  0765  3001               	movlw	1
   739  0766  07A0               	addwf	_pintimer,f
   740  0767  3000               	movlw	0
   741  0768  3DA1               	addwfc	_pintimer+1,f
   742  0769  3000               	movlw	0
   743  076A  3DA2               	addwfc	_pintimer+2,f
   744  076B  3000               	movlw	0
   745  076C  3DA3               	addwfc	_pintimer+3,f
   746  076D                     l901:
   747                           
   748                           ;watchdog.c: 152:             if(pintimer >= 30)
   749  076D  1BA3               	btfsc	_pintimer+3,7
   750  076E  2F7D               	goto	u251
   751  076F  0823               	movf	_pintimer+3,w
   752  0770  1D03               	btfss	3,2
   753  0771  2F7E               	goto	u250
   754  0772  0822               	movf	_pintimer+2,w
   755  0773  1D03               	btfss	3,2
   756  0774  2F7E               	goto	u250
   757  0775  0821               	movf	_pintimer+1,w
   758  0776  1D03               	btfss	3,2
   759  0777  2F7E               	goto	u250
   760  0778  301E               	movlw	30
   761  0779  0220               	subwf	_pintimer,w
   762  077A  1C03               	btfss	3,0
   763  077B  2F7D               	goto	u251
   764  077C  2F7E               	goto	u250
   765  077D                     u251:
   766  077D  2F8D               	goto	l907
   767  077E                     u250:
   768  077E                     l903:
   769                           
   770                           ;watchdog.c: 153:             {;watchdog.c: 154:                 resettimer = 20;
   771  077E  3014               	movlw	20
   772  077F  0020               	movlb	0	; select bank0
   773  0780  00A8               	movwf	_resettimer
   774  0781  3000               	movlw	0
   775  0782  00A9               	movwf	_resettimer+1
   776  0783                     l905:
   777                           
   778                           ;watchdog.c: 155:                 pinreset = 1;
   779  0783  01FC               	clrf	_pinreset
   780  0784  0AFC               	incf	_pinreset,f
   781                           
   782                           ;watchdog.c: 156:                 pintimer = -20;
   783  0785  30FF               	movlw	255
   784  0786  00A3               	movwf	_pintimer+3
   785  0787  30FF               	movlw	255
   786  0788  00A2               	movwf	_pintimer+2
   787  0789  30FF               	movlw	255
   788  078A  00A1               	movwf	_pintimer+1
   789  078B  30EC               	movlw	236
   790  078C  00A0               	movwf	_pintimer
   791  078D                     l907:
   792                           
   793                           ;watchdog.c: 158:             if(resettimer > 0 )
   794  078D  0020               	movlb	0	; select bank0
   795  078E  0828               	movf	_resettimer,w
   796  078F  0429               	iorwf	_resettimer+1,w
   797  0790  1903               	btfsc	3,2
   798  0791  2F93               	goto	u261
   799  0792  2F94               	goto	u260
   800  0793                     u261:
   801  0793  2F98               	goto	l911
   802  0794                     u260:
   803  0794                     l909:
   804                           
   805                           ;watchdog.c: 159:             {;watchdog.c: 160:                 resettimer--;
   806  0794  3001               	movlw	1
   807  0795  02A8               	subwf	_resettimer,f
   808  0796  3000               	movlw	0
   809  0797  3BA9               	subwfb	_resettimer+1,f
   810  0798                     l911:
   811                           
   812                           ;watchdog.c: 162:             if(resettimer == 0)
   813  0798  0828               	movf	_resettimer,w
   814  0799  0429               	iorwf	_resettimer+1,w
   815  079A  1D03               	btfss	3,2
   816  079B  2F9D               	goto	u271
   817  079C  2F9E               	goto	u270
   818  079D                     u271:
   819  079D  2F9F               	goto	l915
   820  079E                     u270:
   821  079E                     l913:
   822                           
   823                           ;watchdog.c: 163:             {;watchdog.c: 164:                 pinreset = 0;
   824  079E  01FC               	clrf	_pinreset
   825  079F                     l915:
   826                           
   827                           ;watchdog.c: 166:             if( pinreset || adcreset)
   828  079F  087C               	movf	_pinreset,w
   829  07A0  1D03               	btfss	3,2
   830  07A1  2FA3               	goto	u281
   831  07A2  2FA4               	goto	u280
   832  07A3                     u281:
   833  07A3  2FA9               	goto	l80
   834  07A4                     u280:
   835  07A4                     l917:
   836  07A4  087D               	movf	_adcreset,w
   837  07A5  1903               	btfsc	3,2
   838  07A6  2FA8               	goto	u291
   839  07A7  2FA9               	goto	u290
   840  07A8                     u291:
   841  07A8  2FAE               	goto	l78
   842  07A9                     u290:
   843  07A9                     l80:
   844                           
   845                           ;watchdog.c: 167:             {;watchdog.c: 168:                 LATAbits.LATA2 = 1;
   846  07A9  0022               	movlb	2	; select bank2
   847  07AA  150C               	bsf	12,2	;volatile
   848                           
   849                           ;watchdog.c: 169:                 sendcommands = 1;
   850  07AB  01FB               	clrf	_sendcommands
   851  07AC  0AFB               	incf	_sendcommands,f
   852                           
   853                           ;watchdog.c: 170:             }
   854  07AD  2FE4               	goto	l933
   855  07AE                     l78:	
   856                           ;watchdog.c: 171:             else
   857                           
   858                           
   859                           ;watchdog.c: 172:             {;watchdog.c: 173:                 LATAbits.LATA2 = 0;
   860  07AE  0022               	movlb	2	; select bank2
   861  07AF  110C               	bcf	12,2	;volatile
   862  07B0                     l919:
   863                           
   864                           ;watchdog.c: 174:                 if(sendcommands)
   865  07B0  087B               	movf	_sendcommands,w
   866  07B1  1903               	btfsc	3,2
   867  07B2  2FB4               	goto	u301
   868  07B3  2FB5               	goto	u300
   869  07B4                     u301:
   870  07B4  2FE4               	goto	l933
   871  07B5                     u300:
   872  07B5                     l921:
   873                           
   874                           ;watchdog.c: 175:                 {;watchdog.c: 176:                     _delay((unsigne
      +                          d long)((500)*(500000/4000.0)));
   875  07B5  3052               	movlw	82
   876  07B6  00F9               	movwf	??_main
   877  07B7  302A               	movlw	42
   878  07B8                     u347:
   879  07B8  0B89               	decfsz	9,f
   880  07B9  2FB8               	goto	u347
   881  07BA  0BF9               	decfsz	??_main,f
   882  07BB  2FB8               	goto	u347
   883  07BC                     l923:
   884                           
   885                           ;watchdog.c: 177:                     SendCommand(0x06,0,16);
   886  07BC  01F4               	clrf	SendCommand@par1
   887  07BD  3010               	movlw	16
   888  07BE  00F9               	movwf	??_main
   889  07BF  0879               	movf	??_main,w
   890  07C0  00F5               	movwf	SendCommand@par2
   891  07C1  3006               	movlw	6
   892  07C2  3186  265E  3186   	fcall	_SendCommand
   893  07C5                     l925:
   894                           
   895                           ;watchdog.c: 178:                     _delay((unsigned long)((500)*(500000/4000.0)));
   896  07C5  3052               	movlw	82
   897  07C6  00F9               	movwf	??_main
   898  07C7  302A               	movlw	42
   899  07C8                     u357:
   900  07C8  0B89               	decfsz	9,f
   901  07C9  2FC8               	goto	u357
   902  07CA  0BF9               	decfsz	??_main,f
   903  07CB  2FC8               	goto	u357
   904                           
   905                           ;watchdog.c: 179:                     SendCommand(0x11,0,1);
   906  07CC  01F4               	clrf	SendCommand@par1
   907  07CD  01F5               	clrf	SendCommand@par2
   908  07CE  0AF5               	incf	SendCommand@par2,f
   909  07CF  3011               	movlw	17
   910  07D0  3186  265E  3186   	fcall	_SendCommand
   911  07D3                     l927:
   912                           
   913                           ;watchdog.c: 180:                     _delay((unsigned long)((500)*(500000/4000.0)));
   914  07D3  3052               	movlw	82
   915  07D4  00F9               	movwf	??_main
   916  07D5  302A               	movlw	42
   917  07D6                     u367:
   918  07D6  0B89               	decfsz	9,f
   919  07D7  2FD6               	goto	u367
   920  07D8  0BF9               	decfsz	??_main,f
   921  07D9  2FD6               	goto	u367
   922  07DA                     l929:
   923                           
   924                           ;watchdog.c: 181:                     SendCommand(0x06,0,16);
   925  07DA  01F4               	clrf	SendCommand@par1
   926  07DB  3010               	movlw	16
   927  07DC  00F9               	movwf	??_main
   928  07DD  0879               	movf	??_main,w
   929  07DE  00F5               	movwf	SendCommand@par2
   930  07DF  3006               	movlw	6
   931  07E0  3186  265E  3186   	fcall	_SendCommand
   932  07E3                     l931:
   933                           
   934                           ;watchdog.c: 182:                     sendcommands = 0;
   935  07E3  01FB               	clrf	_sendcommands
   936  07E4                     l933:
   937                           
   938                           ;watchdog.c: 185:             timer= 0;
   939  07E4  3000               	movlw	0
   940  07E5  0020               	movlb	0	; select bank0
   941  07E6  00A7               	movwf	_timer+3
   942  07E7  3000               	movlw	0
   943  07E8  00A6               	movwf	_timer+2
   944  07E9  3000               	movlw	0
   945  07EA  00A5               	movwf	_timer+1
   946  07EB  3000               	movlw	0
   947  07EC  00A4               	movwf	_timer
   948  07ED                     l935:
   949                           
   950                           ;watchdog.c: 187:         _delay((unsigned long)((1)*(500000/4000.0)));
   951  07ED  3029               	movlw	41
   952  07EE                     u377:
   953  07EE  0B89               	decfsz	9,f
   954  07EF  2FEE               	goto	u377
   955  07F0  3200               	nop2
   956  07F1  2F20               	goto	l877
   957  07F2  2801               	ljmp	start
   958  07F3                     __end_of_main:
   959                           
   960                           	psect	text1
   961  065E                     __ptext1:	
   962 ;; *************** function _SendCommand *****************
   963 ;; Defined at:
   964 ;;		line 75 in file "watchdog.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;  command         1    wreg     unsigned char 
   967 ;;  par1            1    4[COMMON] unsigned char 
   968 ;;  par2            1    5[COMMON] unsigned char 
   969 ;; Auto vars:     Size  Location     Type
   970 ;;  command         1    6[COMMON] unsigned char 
   971 ;;  checksum        2    7[COMMON] short 
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1
   981 ;;      Params:         2       0       0
   982 ;;      Locals:         3       0       0
   983 ;;      Temps:          0      12       0
   984 ;;      Totals:         5      12       0
   985 ;;Total ram usage:       17 bytes
   986 ;; Hardware stack levels used:    1
   987 ;; Hardware stack levels required when called:    1
   988 ;; This function calls:
   989 ;;		_WriteSerial
   990 ;; This function is called by:
   991 ;;		_main
   992 ;; This function uses a non-reentrant model
   993 ;;
   994                           
   995                           
   996                           ;psect for function _SendCommand
   997  065E                     _SendCommand:
   998                           
   999                           ;incstack = 0
  1000                           ; Regs used in _SendCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  1001                           ;SendCommand@command stored from wreg
  1002  065E  00F6               	movwf	SendCommand@command
  1003  065F                     l825:
  1004                           
  1005                           ;watchdog.c: 75: void SendCommand(uint8_t command,uint8_t par1,uint8_t par2);watchdog.c:
      +                           76: {;watchdog.c: 77:     int16_t checksum;;watchdog.c: 78:     buffer[0] = 0x7E;
  1006  065F  307E               	movlw	126
  1007  0660  0020               	movlb	0	; select bank0
  1008  0661  00C2               	movwf	??_SendCommand
  1009  0662  0842               	movf	??_SendCommand,w
  1010  0663  00AE               	movwf	_buffer
  1011                           
  1012                           ;watchdog.c: 79:     buffer[1] = 0xff;
  1013  0664  30FF               	movlw	255
  1014  0665  00C2               	movwf	??_SendCommand
  1015  0666  0842               	movf	??_SendCommand,w
  1016  0667  00AF               	movwf	_buffer+1
  1017                           
  1018                           ;watchdog.c: 80:     buffer[2] = 0x06;
  1019  0668  3006               	movlw	6
  1020  0669  00C2               	movwf	??_SendCommand
  1021  066A  0842               	movf	??_SendCommand,w
  1022  066B  00B0               	movwf	_buffer+2
  1023                           
  1024                           ;watchdog.c: 81:     buffer[3] = command;
  1025  066C  0876               	movf	SendCommand@command,w
  1026  066D  00C2               	movwf	??_SendCommand
  1027  066E  0842               	movf	??_SendCommand,w
  1028  066F  00B1               	movwf	_buffer+3
  1029  0670                     l827:
  1030                           
  1031                           ;watchdog.c: 82:     buffer[4] = 0;
  1032  0670  01B2               	clrf	_buffer+4
  1033  0671                     l829:
  1034                           
  1035                           ;watchdog.c: 83:     buffer[5] = par1;
  1036  0671  0874               	movf	SendCommand@par1,w
  1037  0672  00C2               	movwf	??_SendCommand
  1038  0673  0842               	movf	??_SendCommand,w
  1039  0674  00B3               	movwf	_buffer+5
  1040  0675                     l831:
  1041                           
  1042                           ;watchdog.c: 84:     buffer[6] = par2;
  1043  0675  0875               	movf	SendCommand@par2,w
  1044  0676  00C2               	movwf	??_SendCommand
  1045  0677  0842               	movf	??_SendCommand,w
  1046  0678  00B4               	movwf	_buffer+6
  1047  0679                     l833:
  1048                           
  1049                           ;watchdog.c: 85:     checksum = 1-(buffer[1]+buffer[2]+buffer[3]+buffer[4]+buffer[5]+buf
      +                          fer[6]);
  1050  0679  082F               	movf	_buffer+1,w
  1051  067A  00C2               	movwf	??_SendCommand
  1052  067B  01C3               	clrf	??_SendCommand+1
  1053  067C  09C2               	comf	??_SendCommand,f
  1054  067D  09C3               	comf	??_SendCommand+1,f
  1055  067E  0AC2               	incf	??_SendCommand,f
  1056  067F  1903               	skipnz
  1057  0680  0AC3               	incf	??_SendCommand+1,f
  1058  0681  0843               	movf	??_SendCommand+1,w
  1059  0682  00C5               	movwf	??_SendCommand+3
  1060  0683  0830               	movf	_buffer+2,w
  1061  0684  0242               	subwf	??_SendCommand,w
  1062  0685  00C4               	movwf	??_SendCommand+2
  1063  0686  1C03               	skipc
  1064  0687  03C5               	decf	??_SendCommand+3,f
  1065  0688  0845               	movf	??_SendCommand+3,w
  1066  0689  00C7               	movwf	??_SendCommand+5
  1067  068A  0831               	movf	_buffer+3,w
  1068  068B  0244               	subwf	??_SendCommand+2,w
  1069  068C  00C6               	movwf	??_SendCommand+4
  1070  068D  1C03               	skipc
  1071  068E  03C7               	decf	??_SendCommand+5,f
  1072  068F  0847               	movf	??_SendCommand+5,w
  1073  0690  00C9               	movwf	??_SendCommand+7
  1074  0691  0832               	movf	_buffer+4,w
  1075  0692  0246               	subwf	??_SendCommand+4,w
  1076  0693  00C8               	movwf	??_SendCommand+6
  1077  0694  1C03               	skipc
  1078  0695  03C9               	decf	??_SendCommand+7,f
  1079  0696  0849               	movf	??_SendCommand+7,w
  1080  0697  00CB               	movwf	??_SendCommand+9
  1081  0698  0833               	movf	_buffer+5,w
  1082  0699  0248               	subwf	??_SendCommand+6,w
  1083  069A  00CA               	movwf	??_SendCommand+8
  1084  069B  1C03               	skipc
  1085  069C  03CB               	decf	??_SendCommand+9,f
  1086  069D  084B               	movf	??_SendCommand+9,w
  1087  069E  00CD               	movwf	??_SendCommand+11
  1088  069F  0834               	movf	_buffer+6,w
  1089  06A0  024A               	subwf	??_SendCommand+8,w
  1090  06A1  00CC               	movwf	??_SendCommand+10
  1091  06A2  1C03               	skipc
  1092  06A3  03CD               	decf	??_SendCommand+11,f
  1093  06A4  084C               	movf	??_SendCommand+10,w
  1094  06A5  3E01               	addlw	1
  1095  06A6  00F7               	movwf	SendCommand@checksum
  1096  06A7  3000               	movlw	0
  1097  06A8  3D4D               	addwfc	??_SendCommand+11,w
  1098  06A9  00F8               	movwf	SendCommand@checksum+1
  1099  06AA                     l835:
  1100                           
  1101                           ;watchdog.c: 86:     checksum = checksum-1;
  1102  06AA  0877               	movf	SendCommand@checksum,w
  1103  06AB  3EFF               	addlw	255
  1104  06AC  00F7               	movwf	SendCommand@checksum
  1105  06AD  30FF               	movlw	255
  1106  06AE  3D78               	addwfc	SendCommand@checksum+1,w
  1107  06AF  00F8               	movwf	SendCommand@checksum+1
  1108                           
  1109                           ;watchdog.c: 87:     buffer[7] = checksum>>8;
  1110  06B0  0878               	movf	SendCommand@checksum+1,w
  1111  06B1  00C2               	movwf	??_SendCommand
  1112  06B2  0842               	movf	??_SendCommand,w
  1113  06B3  00B5               	movwf	_buffer+7
  1114  06B4                     l837:
  1115                           
  1116                           ;watchdog.c: 88:     buffer[8] = checksum&0xff;
  1117  06B4  0877               	movf	SendCommand@checksum,w
  1118  06B5  00C2               	movwf	??_SendCommand
  1119  06B6  0842               	movf	??_SendCommand,w
  1120  06B7  00B6               	movwf	_buffer+8
  1121  06B8                     l839:
  1122                           
  1123                           ;watchdog.c: 89:     buffer[9] = 0xEF;
  1124  06B8  30EF               	movlw	239
  1125  06B9  00C2               	movwf	??_SendCommand
  1126  06BA  0842               	movf	??_SendCommand,w
  1127  06BB  00B7               	movwf	_buffer+9
  1128  06BC                     l841:
  1129                           
  1130                           ;watchdog.c: 90:     WriteSerial(&buffer,10);
  1131  06BC  300A               	movlw	10
  1132  06BD  00C2               	movwf	??_SendCommand
  1133  06BE  0842               	movf	??_SendCommand,w
  1134  06BF  00F0               	movwf	WriteSerial@len
  1135  06C0  302E               	movlw	(low (_buffer| 0))& (0+255)
  1136  06C1  3186  2642  3186   	fcall	_WriteSerial
  1137  06C4                     l60:
  1138  06C4  0008               	return
  1139  06C5                     __end_of_SendCommand:
  1140                           
  1141                           	psect	text2
  1142  0642                     __ptext2:	
  1143 ;; *************** function _WriteSerial *****************
  1144 ;; Defined at:
  1145 ;;		line 66 in file "watchdog.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;  buffer          1    wreg     PTR unsigned char 
  1148 ;;		 -> buffer(20), 
  1149 ;;  len             1    0[COMMON] unsigned char 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;  buffer          1    3[COMMON] PTR unsigned char 
  1152 ;;		 -> buffer(20), 
  1153 ;;  i               1    2[COMMON] unsigned char 
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMMON   BANK0   BANK1
  1163 ;;      Params:         1       0       0
  1164 ;;      Locals:         2       0       0
  1165 ;;      Temps:          1       0       0
  1166 ;;      Totals:         4       0       0
  1167 ;;Total ram usage:        4 bytes
  1168 ;; Hardware stack levels used:    1
  1169 ;; This function calls:
  1170 ;;		Nothing
  1171 ;; This function is called by:
  1172 ;;		_SendCommand
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           
  1177                           ;psect for function _WriteSerial
  1178  0642                     _WriteSerial:
  1179                           
  1180                           ;incstack = 0
  1181                           ; Regs used in _WriteSerial: [wreg+fsr1l+fsr1h+status,2+status,0]
  1182                           ;WriteSerial@buffer stored from wreg
  1183  0642  00F3               	movwf	WriteSerial@buffer
  1184  0643                     l815:
  1185                           
  1186                           ;watchdog.c: 66: void WriteSerial(unsigned char *buffer,uint8_t len);watchdog.c: 67:    
      +                           {;watchdog.c: 68:     uint8_t i;;watchdog.c: 69:     for(i = 0;i < len;i++)
  1187  0643  01F2               	clrf	WriteSerial@i
  1188  0644  2E57               	goto	l823
  1189  0645                     l817:
  1190                           
  1191                           ;watchdog.c: 70:     {;watchdog.c: 71:         TXREG = *buffer++;
  1192  0645  0873               	movf	WriteSerial@buffer,w
  1193  0646  0086               	movwf	6
  1194  0647  0187               	clrf	7
  1195  0648  0801               	movf	1,w
  1196  0649  0023               	movlb	3	; select bank3
  1197  064A  009A               	movwf	26	;volatile
  1198  064B                     l819:
  1199  064B  3001               	movlw	1
  1200  064C  00F1               	movwf	??_WriteSerial
  1201  064D  0871               	movf	??_WriteSerial,w
  1202  064E  07F3               	addwf	WriteSerial@buffer,f
  1203  064F                     l53:	
  1204                           ;watchdog.c: 72:         while(TXSTAbits.TRMT == 0);
  1205                           
  1206  064F  1C9E               	btfss	30,1	;volatile
  1207  0650  2E52               	goto	u161
  1208  0651  2E53               	goto	u160
  1209  0652                     u161:
  1210  0652  2E4F               	goto	l53
  1211  0653                     u160:
  1212  0653                     l821:
  1213                           
  1214                           ;watchdog.c: 73:     }
  1215  0653  3001               	movlw	1
  1216  0654  00F1               	movwf	??_WriteSerial
  1217  0655  0871               	movf	??_WriteSerial,w
  1218  0656  07F2               	addwf	WriteSerial@i,f
  1219  0657                     l823:
  1220  0657  0870               	movf	WriteSerial@len,w
  1221  0658  0272               	subwf	WriteSerial@i,w
  1222  0659  1C03               	skipc
  1223  065A  2E5C               	goto	u171
  1224  065B  2E5D               	goto	u170
  1225  065C                     u171:
  1226  065C  2E45               	goto	l817
  1227  065D                     u170:
  1228  065D                     l57:
  1229  065D  0008               	return
  1230  065E                     __end_of_WriteSerial:
  1231  007E                     btemp	set	126	;btemp
  1232  007E                     wtemp0	set	126
  1233                           
  1234                           	psect	idloc
  1235                           
  1236                           ;Config register IDLOC0 @ 0x8000
  1237                           ;	unspecified, using default values
  1238  8000                     	org	32768
  1239  8000  3FFF               	dw	16383
  1240                           
  1241                           ;Config register IDLOC1 @ 0x8001
  1242                           ;	unspecified, using default values
  1243  8001                     	org	32769
  1244  8001  3FFF               	dw	16383
  1245                           
  1246                           ;Config register IDLOC2 @ 0x8002
  1247                           ;	unspecified, using default values
  1248  8002                     	org	32770
  1249  8002  3FFF               	dw	16383
  1250                           
  1251                           ;Config register IDLOC3 @ 0x8003
  1252                           ;	unspecified, using default values
  1253  8003                     	org	32771
  1254  8003  3FFF               	dw	16383
  1255                           
  1256                           	psect	config
  1257                           
  1258                           ;Config register CONFIG1 @ 0x8007
  1259                           ;	Oscillator Selection
  1260                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  1261                           ;	Watchdog Timer Enable
  1262                           ;	WDTE = OFF, WDT disabled
  1263                           ;	Power-up Timer Enable
  1264                           ;	PWRTE = OFF, PWRT disabled
  1265                           ;	MCLR Pin Function Select
  1266                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  1267                           ;	Flash Program Memory Code Protection
  1268                           ;	CP = OFF, Program memory code protection is disabled
  1269                           ;	Data Memory Code Protection
  1270                           ;	CPD = OFF, Data memory code protection is disabled
  1271                           ;	Brown-out Reset Enable
  1272                           ;	BOREN = OFF, Brown-out Reset disabled
  1273                           ;	Clock Out Enable
  1274                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  1275                           ;	Internal/External Switchover
  1276                           ;	IESO = ON, Internal/External Switchover mode is enabled
  1277                           ;	Fail-Safe Clock Monitor Enable
  1278                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  1279  8007                     	org	32775
  1280  8007  39E4               	dw	14820
  1281                           
  1282                           ;Config register CONFIG2 @ 0x8008
  1283                           ;	Flash Memory Self-Write Protection
  1284                           ;	WRT = OFF, Write protection off
  1285                           ;	PLL Enable
  1286                           ;	PLLEN = OFF, 4x PLL disabled
  1287                           ;	Stack Overflow/Underflow Reset Enable
  1288                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  1289                           ;	Brown-out Reset Voltage Selection
  1290                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  1291                           ;	Low-Voltage Programming Enable
  1292                           ;	LVP = ON, Low-voltage programming enabled
  1293  8008                     	org	32776
  1294  8008  3EFF               	dw	16127

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         37
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     12      46
    BANK1            32      0       0

Pointer List with Targets:

    WriteSerial@buffer	PTR unsigned char  size(1) Largest target is 20
		 -> buffer(BANK0[20]), 


Critical Paths under _main in COMMON

    _main->_SendCommand
    _SendCommand->_WriteSerial

Critical Paths under _main in BANK0

    _main->_SendCommand

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1224
                                              9 COMMON     2     2      0
                        _SendCommand
 ---------------------------------------------------------------------------------
 (1) _SendCommand                                         17    15      2    1224
                                              4 COMMON     5     3      2
                                              0 BANK0     12    12      0
                        _WriteSerial
 ---------------------------------------------------------------------------------
 (2) _WriteSerial                                          4     3      1     178
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SendCommand
     _WriteSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      2E       6       57.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      3C       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Mar 21 18:17:29 2023

                     l60 06C4                       l53 064F                       l80 07A9  
                     l57 065D                       l73 0760                       l67 073C  
                     l78 07AE                      l821 0653                      l901 076D  
                    l823 0657                      l815 0643                      l831 0675  
                    l911 0798                      l903 077E                      l817 0645  
                    l841 06BC                      l833 0679                      l825 065F  
                    l921 07B5                      l913 079E                      l905 0783  
                    l819 064B                      l835 06AA                      l827 0670  
                    l931 07E3                      l923 07BC                      l915 079F  
                    l907 078D                      l851 06DC                      l843 06C5  
                    l837 06B4                      l829 0671                      l925 07C5  
                    l933 07E4                      l917 07A4                      l909 0794  
                    l861 06E2                      l853 06DE                      l845 06CE  
                    l839 06B8                      l927 07D3                      l919 07B0  
                    l935 07ED                      l871 0707                      l863 06E4  
                    l855 06DF                      l847 06D3                      l929 07DA  
                    l881 073A                      l873 070E                      l865 06EF  
                    l857 06E0                      l849 06DB                      l891 074F  
                    l883 0740                      l875 0717                      l867 06F8  
                    l859 06E1                      l893 0755                      l885 0746  
                    l877 0720                      l869 0700                      l895 0757  
                    l887 0748                      l879 0729                      l897 075E  
                    l889 074E                      l899 0765                      u200 0746  
                    u201 0745                      u210 074E                      u211 074D  
                    u300 07B5                      u220 0755                      u301 07B4  
                    u221 0754                      u230 075E                      u231 075D  
                    u160 0653                      u240 0765                      u161 0652  
                    u241 0764                      u170 065D                      u250 077E  
                    u171 065C                      u251 077D                      u260 0794  
                    u180 073A                      u261 0793                      u181 0739  
                    u317 06E9                      u270 079E                      u190 0740  
                    u271 079D                      u191 073F                      u327 06FB  
                    u280 07A4                      u281 07A3                      u337 070A  
                    u290 07A9                      u347 07B8                      u291 07A8  
                    u357 07C8                      u367 07D6                      u377 07EE  
   __size_of_WriteSerial 001C                      wreg 0009                     _main 06C5  
                   fsr0h 0005                     fsr1h 0007                     indf0 0000  
                   fsr0l 0004                     indf1 0001                     fsr1l 0006  
                   btemp 007E                     start 0001                    ?_main 0070  
                  _TXREG 019A                    _timer 0024                    status 0003  
                  wtemp0 007E          __initialization 07F3            ??_SendCommand 0042  
           __end_of_main 07F3                   ??_main 0079                   _ADRESH 009C  
                 _SPBRGH 019C                   _SPBRGL 019B                   _buffer 002E  
    __end_of_SendCommand 06C5  __end_of__initialization 07FE           __pcstackCOMMON 0070  
             __pbssBANK0 0020           WriteSerial@len 0070             WriteSerial@i 0072  
             __pmaintext 06C5              _SendCommand 065E            ??_WriteSerial 0071  
                __ptext1 065E                  __ptext2 0642      __end_of_WriteSerial 065E  
                clrloop0 063D     end_of_initialization 07FE       SendCommand@command 0076  
              _RCSTAbits 019D               _resettimer 0028                _PORTAbits 000C  
              _TRISAbits 008C                _TXSTAbits 019E              _BAUDCONbits 019F  
            _WriteSerial 0642      start_initialization 07F3             ?_SendCommand 0074  
            __pbssCOMMON 007B                ___latbits 0000            __pcstackBANK0 0042  
      WriteSerial@buffer 0073                _laststate 002C                 _LATAbits 010C  
              clear_ram0 063C               _ADCON0bits 009D               _ADCON1bits 009E  
   __size_of_SendCommand 0067             ?_WriteSerial 0070               _ANSELAbits 018C  
               _adcreset 007D             _sendcommands 007B                 _actstate 002A  
          __size_of_main 012E                 _pinreset 007C                 _pintimer 0020  
             _FVRCONbits 0117      SendCommand@checksum 0077          SendCommand@par1 0074  
        SendCommand@par2 0075  
